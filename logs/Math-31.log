=== GPT-only pipeline for Math-31 ===
  📊 GPT[hypothesis H1] tokens: 78 prompt + 57 completion = 135 total
  📊 GPT[hypothesis H2] tokens: 78 prompt + 67 completion = 145 total
  📊 GPT[hypothesis H3] tokens: 78 prompt + 67 completion = 145 total
  📊 GPT[hypothesis H4] tokens: 78 prompt + 55 completion = 133 total
  📊 GPT[hypothesis H5] tokens: 78 prompt + 55 completion = 133 total
  📊 GPT[hypothesis_confidence H1] tokens: 118 prompt + 3 completion = 121 total
  📊 GPT[hypothesis_confidence H2] tokens: 129 prompt + 3 completion = 132 total
  📊 GPT[hypothesis_confidence H3] tokens: 129 prompt + 3 completion = 132 total
  📊 GPT[hypothesis_confidence H4] tokens: 116 prompt + 3 completion = 119 total
  📊 GPT[hypothesis_confidence H5] tokens: 116 prompt + 3 completion = 119 total
Hypotheses:
  H1 (confidence 0.700): Hypothesis H1: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the probability parameter is set to 0 or 1.
  H2 (confidence 0.800): Hypothesis H2: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the number of trials is zero or the probability of success is at the boundary values (0 or 1).
  H3 (confidence 0.800): Hypothesis H3: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the number of trials is zero or the probability of success is at its boundary values (0 or 1).
  H4 (confidence 0.800): Hypothesis H4: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases where the number of trials or probability parameters are set to extreme values, such as zero or one.
  H5 (confidence 0.800): Hypothesis H5: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases where the number of trials or probability parameters are set to extreme values, such as zero or one.
Ignoring 20 covered classes without method coverage
    ▶️ GPT[class pre-ranking] running 4 prompts
  📊 GPT[class_pre_rank org.apache.commons.math3.util.ContinuedFraction] tokens: 658 prompt + 54 completion = 712 total
  📊 GPT[class_pre_rank org.apache.commons.math3.special.Beta] tokens: 658 prompt + 58 completion = 716 total
  📊 GPT[class_pre_rank org.apache.commons.math3.distribution.BinomialDistribution] tokens: 653 prompt + 70 completion = 723 total
  📊 GPT[class_pre_rank org.apache.commons.math3.distribution.FDistribution] tokens: 689 prompt + 66 completion = 755 total
    ✅ GPT[class pre-ranking] completed; taking top 5
Candidate classes:
  org.apache.commons.math3.util.ContinuedFraction: n/a ```json
{"score": 0.9, "reason": "The failure occurs due to a ConvergenceException in the ContinuedFraction.evaluate method, indicating a numerical instability when evaluating large trials. This suggests the issue is likely within the ContinuedFraction class."}
```
  org.apache.commons.math3.special.Beta: n/a ```json
{
  "score": 0.9,
  "reason": "The failure is due to a ConvergenceException in the ContinuedFraction evaluation within the Beta.regularizedBeta method, indicating a numerical instability issue in the Beta class when handling large trial numbers."
}
```
  org.apache.commons.math3.distribution.BinomialDistribution: n/a ```json
{"score": 0.8, "reason": "The failure occurs in the BinomialDistribution class during the inverseCumulativeProbability method, which relies on the ContinuedFraction and Beta classes. The issue is likely due to numerical instability in these calculations, suggesting the BinomialDistribution class is a strong candidate for the fix."}
```
  org.apache.commons.math3.distribution.FDistribution: n/a ```json
{"score": 0.2, "reason": "The failure is related to the evaluation of a continued fraction in the BinomialDistribution class, not the FDistribution class. The stack trace indicates the issue arises from the ContinuedFraction and Beta classes, suggesting the bug is more likely in those areas."}
```
Collected 10 methods across candidate classes
    ▶️ GPT[method pre-ranking] running 10 prompts
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int)] tokens: 705 prompt + 69 completion = 774 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double)] tokens: 723 prompt + 49 completion = 772 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double)] tokens: 749 prompt + 74 completion = 823 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double)] tokens: 727 prompt + 86 completion = 813 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy()] tokens: 633 prompt + 84 completion = 717 total
  📊 GPT[method_pre_rank org.apache.commons.math3.special.Beta.logBeta(double,double,double,int)] tokens: 694 prompt + 93 completion = 787 total
  📊 GPT[method_pre_rank org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double)] tokens: 618 prompt + 70 completion = 688 total
  📊 GPT[method_pre_rank org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)] tokens: 692 prompt + 70 completion = 762 total
  📊 GPT[method_pre_rank org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction()] tokens: 630 prompt + 62 completion = 692 total
  📊 GPT[method_pre_rank org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int)] tokens: 778 prompt + 74 completion = 852 total
    ✅ GPT[method pre-ranking] completed
Selected 10 candidate methods
  📊 GPT[class_score org.apache.commons.math3.util.ContinuedFraction H1] tokens: 417 prompt + 3 completion = 420 total
  📊 GPT[class_explanation org.apache.commons.math3.util.ContinuedFraction H1] tokens: 395 prompt + 151 completion = 546 total
  📊 GPT[class_score org.apache.commons.math3.special.Beta H1] tokens: 430 prompt + 3 completion = 433 total
  📊 GPT[class_explanation org.apache.commons.math3.special.Beta H1] tokens: 408 prompt + 131 completion = 539 total
  📊 GPT[class_score org.apache.commons.math3.distribution.BinomialDistribution H1] tokens: 414 prompt + 3 completion = 417 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.BinomialDistribution H1] tokens: 393 prompt + 135 completion = 528 total
  📊 GPT[class_score org.apache.commons.math3.distribution.FDistribution H1] tokens: 428 prompt + 1 completion = 429 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.FDistribution H1] tokens: 406 prompt + 141 completion = 547 total
  📊 GPT[class_score org.apache.commons.math3.util.ContinuedFraction H2] tokens: 427 prompt + 3 completion = 430 total
  📊 GPT[class_explanation org.apache.commons.math3.util.ContinuedFraction H2] tokens: 405 prompt + 139 completion = 544 total
  📊 GPT[class_score org.apache.commons.math3.special.Beta H2] tokens: 440 prompt + 3 completion = 443 total
  📊 GPT[class_explanation org.apache.commons.math3.special.Beta H2] tokens: 418 prompt + 118 completion = 536 total
  📊 GPT[class_score org.apache.commons.math3.distribution.BinomialDistribution H2] tokens: 424 prompt + 3 completion = 427 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.BinomialDistribution H2] tokens: 403 prompt + 150 completion = 553 total
  📊 GPT[class_score org.apache.commons.math3.distribution.FDistribution H2] tokens: 438 prompt + 3 completion = 441 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.FDistribution H2] tokens: 416 prompt + 124 completion = 540 total
  📊 GPT[class_score org.apache.commons.math3.util.ContinuedFraction H3] tokens: 427 prompt + 3 completion = 430 total
  📊 GPT[class_explanation org.apache.commons.math3.util.ContinuedFraction H3] tokens: 405 prompt + 115 completion = 520 total
  📊 GPT[class_score org.apache.commons.math3.special.Beta H3] tokens: 440 prompt + 3 completion = 443 total
  📊 GPT[class_explanation org.apache.commons.math3.special.Beta H3] tokens: 418 prompt + 126 completion = 544 total
  📊 GPT[class_score org.apache.commons.math3.distribution.BinomialDistribution H3] tokens: 424 prompt + 3 completion = 427 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.BinomialDistribution H3] tokens: 403 prompt + 125 completion = 528 total
  📊 GPT[class_score org.apache.commons.math3.distribution.FDistribution H3] tokens: 438 prompt + 1 completion = 439 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.FDistribution H3] tokens: 416 prompt + 122 completion = 538 total
  📊 GPT[class_score org.apache.commons.math3.util.ContinuedFraction H4] tokens: 415 prompt + 3 completion = 418 total
  📊 GPT[class_explanation org.apache.commons.math3.util.ContinuedFraction H4] tokens: 393 prompt + 106 completion = 499 total
  📊 GPT[class_score org.apache.commons.math3.special.Beta H4] tokens: 428 prompt + 3 completion = 431 total
  📊 GPT[class_explanation org.apache.commons.math3.special.Beta H4] tokens: 406 prompt + 126 completion = 532 total
  📊 GPT[class_score org.apache.commons.math3.distribution.BinomialDistribution H4] tokens: 412 prompt + 3 completion = 415 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.BinomialDistribution H4] tokens: 391 prompt + 112 completion = 503 total
  📊 GPT[class_score org.apache.commons.math3.distribution.FDistribution H4] tokens: 426 prompt + 3 completion = 429 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.FDistribution H4] tokens: 404 prompt + 151 completion = 555 total
  📊 GPT[class_score org.apache.commons.math3.util.ContinuedFraction H5] tokens: 415 prompt + 3 completion = 418 total
  📊 GPT[class_explanation org.apache.commons.math3.util.ContinuedFraction H5] tokens: 393 prompt + 106 completion = 499 total
  📊 GPT[class_score org.apache.commons.math3.special.Beta H5] tokens: 428 prompt + 3 completion = 431 total
  📊 GPT[class_explanation org.apache.commons.math3.special.Beta H5] tokens: 406 prompt + 106 completion = 512 total
  📊 GPT[class_score org.apache.commons.math3.distribution.BinomialDistribution H5] tokens: 412 prompt + 3 completion = 415 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.BinomialDistribution H5] tokens: 391 prompt + 118 completion = 509 total
  📊 GPT[class_score org.apache.commons.math3.distribution.FDistribution H5] tokens: 426 prompt + 3 completion = 429 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.FDistribution H5] tokens: 404 prompt + 140 completion = 544 total
  📊 GPT[method_score org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int) H1] tokens: 644 prompt + 3 completion = 647 total
  📊 GPT[method_explanation org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int) H1] tokens: 507 prompt + 150 completion = 657 total
  📊 GPT[method_score org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction() H1] tokens: 441 prompt + 3 completion = 444 total
  📊 GPT[method_explanation org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction() H1] tokens: 417 prompt + 120 completion = 537 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double) H1] tokens: 462 prompt + 3 completion = 465 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double) H1] tokens: 440 prompt + 186 completion = 626 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int) H1] tokens: 607 prompt + 3 completion = 610 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int) H1] tokens: 459 prompt + 166 completion = 625 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.logBeta(double,double,double,int) H1] tokens: 552 prompt + 3 completion = 555 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.logBeta(double,double,double,int) H1] tokens: 461 prompt + 163 completion = 624 total
  📊 GPT[method_score org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int) H1] tokens: 516 prompt + 3 completion = 519 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int) H1] tokens: 456 prompt + 149 completion = 605 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double) H1] tokens: 597 prompt + 3 completion = 600 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double) H1] tokens: 474 prompt + 119 completion = 593 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double) H1] tokens: 534 prompt + 3 completion = 537 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double) H1] tokens: 461 prompt + 125 completion = 586 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double) H1] tokens: 530 prompt + 3 completion = 533 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double) H1] tokens: 484 prompt + 127 completion = 611 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy() H1] tokens: 441 prompt + 3 completion = 444 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy() H1] tokens: 420 prompt + 122 completion = 542 total
  📊 GPT[method_score org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int) H2] tokens: 654 prompt + 3 completion = 657 total
  📊 GPT[method_explanation org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int) H2] tokens: 518 prompt + 159 completion = 677 total
  📊 GPT[method_score org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction() H2] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction() H2] tokens: 428 prompt + 128 completion = 556 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double) H2] tokens: 472 prompt + 3 completion = 475 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double) H2] tokens: 451 prompt + 154 completion = 605 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int) H2] tokens: 617 prompt + 3 completion = 620 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int) H2] tokens: 470 prompt + 121 completion = 591 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.logBeta(double,double,double,int) H2] tokens: 562 prompt + 3 completion = 565 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.logBeta(double,double,double,int) H2] tokens: 472 prompt + 134 completion = 606 total
  📊 GPT[method_score org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int) H2] tokens: 526 prompt + 3 completion = 529 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int) H2] tokens: 467 prompt + 145 completion = 612 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double) H2] tokens: 607 prompt + 3 completion = 610 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double) H2] tokens: 485 prompt + 124 completion = 609 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double) H2] tokens: 544 prompt + 3 completion = 547 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double) H2] tokens: 472 prompt + 149 completion = 621 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double) H2] tokens: 540 prompt + 3 completion = 543 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double) H2] tokens: 495 prompt + 104 completion = 599 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy() H2] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy() H2] tokens: 431 prompt + 107 completion = 538 total
  📊 GPT[method_score org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int) H3] tokens: 654 prompt + 3 completion = 657 total
  📊 GPT[method_explanation org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int) H3] tokens: 518 prompt + 137 completion = 655 total
  📊 GPT[method_score org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction() H3] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction() H3] tokens: 428 prompt + 129 completion = 557 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double) H3] tokens: 472 prompt + 3 completion = 475 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double) H3] tokens: 451 prompt + 127 completion = 578 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int) H3] tokens: 617 prompt + 3 completion = 620 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int) H3] tokens: 470 prompt + 131 completion = 601 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.logBeta(double,double,double,int) H3] tokens: 562 prompt + 3 completion = 565 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.logBeta(double,double,double,int) H3] tokens: 472 prompt + 121 completion = 593 total
  📊 GPT[method_score org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int) H3] tokens: 526 prompt + 3 completion = 529 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int) H3] tokens: 467 prompt + 170 completion = 637 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double) H3] tokens: 607 prompt + 3 completion = 610 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double) H3] tokens: 485 prompt + 108 completion = 593 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double) H3] tokens: 544 prompt + 3 completion = 547 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double) H3] tokens: 472 prompt + 170 completion = 642 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double) H3] tokens: 540 prompt + 3 completion = 543 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double) H3] tokens: 495 prompt + 109 completion = 604 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy() H3] tokens: 451 prompt + 1 completion = 452 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy() H3] tokens: 431 prompt + 105 completion = 536 total
  📊 GPT[method_score org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int) H4] tokens: 642 prompt + 3 completion = 645 total
  📊 GPT[method_explanation org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int) H4] tokens: 505 prompt + 122 completion = 627 total
  📊 GPT[method_score org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction() H4] tokens: 439 prompt + 3 completion = 442 total
  📊 GPT[method_explanation org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction() H4] tokens: 415 prompt + 120 completion = 535 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double) H4] tokens: 460 prompt + 3 completion = 463 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double) H4] tokens: 438 prompt + 124 completion = 562 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int) H4] tokens: 605 prompt + 3 completion = 608 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int) H4] tokens: 457 prompt + 138 completion = 595 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.logBeta(double,double,double,int) H4] tokens: 550 prompt + 3 completion = 553 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.logBeta(double,double,double,int) H4] tokens: 459 prompt + 159 completion = 618 total
  📊 GPT[method_score org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int) H4] tokens: 514 prompt + 3 completion = 517 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int) H4] tokens: 454 prompt + 179 completion = 633 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double) H4] tokens: 595 prompt + 3 completion = 598 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double) H4] tokens: 472 prompt + 134 completion = 606 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double) H4] tokens: 532 prompt + 3 completion = 535 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double) H4] tokens: 459 prompt + 137 completion = 596 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double) H4] tokens: 528 prompt + 3 completion = 531 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double) H4] tokens: 482 prompt + 114 completion = 596 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy() H4] tokens: 439 prompt + 3 completion = 442 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy() H4] tokens: 418 prompt + 109 completion = 527 total
  📊 GPT[method_score org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int) H5] tokens: 642 prompt + 3 completion = 645 total
  📊 GPT[method_explanation org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int) H5] tokens: 505 prompt + 128 completion = 633 total
  📊 GPT[method_score org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction() H5] tokens: 439 prompt + 3 completion = 442 total
  📊 GPT[method_explanation org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction() H5] tokens: 415 prompt + 115 completion = 530 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double) H5] tokens: 460 prompt + 3 completion = 463 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double) H5] tokens: 438 prompt + 114 completion = 552 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int) H5] tokens: 605 prompt + 3 completion = 608 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int) H5] tokens: 457 prompt + 134 completion = 591 total
  📊 GPT[method_score org.apache.commons.math3.special.Beta.logBeta(double,double,double,int) H5] tokens: 550 prompt + 3 completion = 553 total
  📊 GPT[method_explanation org.apache.commons.math3.special.Beta.logBeta(double,double,double,int) H5] tokens: 459 prompt + 157 completion = 616 total
  📊 GPT[method_score org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int) H5] tokens: 514 prompt + 3 completion = 517 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int) H5] tokens: 454 prompt + 150 completion = 604 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double) H5] tokens: 595 prompt + 3 completion = 598 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double) H5] tokens: 472 prompt + 133 completion = 605 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double) H5] tokens: 532 prompt + 3 completion = 535 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double) H5] tokens: 459 prompt + 145 completion = 604 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double) H5] tokens: 528 prompt + 3 completion = 531 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double) H5] tokens: 482 prompt + 129 completion = 611 total
  📊 GPT[method_score org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy() H5] tokens: 439 prompt + 3 completion = 442 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy() H5] tokens: 418 prompt + 106 completion = 524 total
  🔀 Tie-breaking 4 methods with score 0.800000
  📊 GPT[method_tie_break] tokens: 1880 prompt + 131 completion = 2011 total
  🔍 Raw tie-breaking response: ```json
[
  {"method": "org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int)", "tie_break_score": 0.95},
  {"method": "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)", "tie_break_score": 0.82},
  {"method": "org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double)", "tie_break_score": 0.65},
  {"method": "org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int)", "tie_break_score": 0.43}
]
```
    ❌ JSON parse attempt 1 failed: Expecting value: line 1 column 1 (char 0)
    ✅ Successfully parsed JSON attempt 2
    🔍 Parsed object type: <class 'list'>
    🔍 Parsed object content: [{'method': 'org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int)', 'tie_break_score': 0.95}, {'method': 'org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)', 'tie_break_score': 0.82}, {'method': 'org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double)', 'tie_break_score': 0.65}, {'method': 'org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int)', 'tie_break_score': 0.43}]
    🔍 Processing method: org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int), value: 0.95 (type: <class 'float'>)
    🔍 Coerced to: 0.95
    📝 Recorded org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int): 0.95 -> 0.95
    🔍 Processing method: org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int), value: 0.82 (type: <class 'float'>)
    🔍 Coerced to: 0.82
    📝 Recorded org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int): 0.82 -> 0.82
    🔍 Processing method: org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double), value: 0.65 (type: <class 'float'>)
    🔍 Coerced to: 0.65
    📝 Recorded org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double): 0.65 -> 0.65
    🔍 Processing method: org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int), value: 0.43 (type: <class 'float'>)
    🔍 Coerced to: 0.43
    📝 Recorded org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int): 0.43 -> 0.43
  📊 Parsed tie-breaking scores: {'org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int)': 1.0, 'org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)': 0.8631578947368421, 'org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double)': 0.6842105263157895, 'org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int)': 0.45263157894736844}
  🎯 Tie-breaking scores: {'org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int)': 1.0, 'org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int)': 0.8631578947368421, 'org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double)': 0.6842105263157895, 'org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int)': 0.45263157894736844}
    org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int): 0.800000 + 0.010000 = 0.810000
    org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double): 0.800000 + 0.006842 = 0.806842
    org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int): 0.800000 + 0.008632 = 0.808632
    org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int): 0.800000 + 0.004526 = 0.804526
  ✅ Final ranking after tie-breaking:
    1. org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int): 0.810000
    2. org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int): 0.808632
    3. org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double): 0.806842
    4. org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int): 0.804526

Top suspicious methods:
  1. org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int): 0.810 — best hypothesis H1: Hypothesis H1: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the probability parameter is set to 0 or 1. (confidence 0.700); supporting class org.apache.commons.math3.util.ContinuedFraction (HH2)
      explanation: The method `org.apache.commons.math3.util.ContinuedFraction.evaluate(double, double, int)` is responsible for evaluating continued fractions using the modified Lentz algorithm. The failure in `testMath718` is due to a `ConvergenceExcepti...
  2. org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int): 0.809 — best hypothesis H1: Hypothesis H1: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the probability parameter is set to 0 or 1. (confidence 0.700); supporting class org.apache.commons.math3.special.Beta (HH1)
      explanation: The method `org.apache.commons.math3.special.Beta.regularizedBeta(double, double, double, double, int)` calculates the regularized beta function, which is crucial for computing the cumulative distribution function (CDF) of the binomial d...
  3. org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double): 0.807 — best hypothesis H1: Hypothesis H1: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the probability parameter is set to 0 or 1. (confidence 0.700); supporting class org.apache.commons.math3.special.Beta (HH1)
      explanation: The method `org.apache.commons.math3.special.Beta.regularizedBeta(double, double, double)` is used to compute the regularized incomplete beta function, which is integral to calculating probabilities in binomial distributions. In the fail...
  4. org.apache.commons.math3.distribution.BinomialDistribution.cumulativeProbability(int): 0.805 — best hypothesis H4: Hypothesis H4: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases where the number of trials or probability parameters are set to extreme values, such as zero or one. (confidence 0.800); supporting class org.apache.commons.math3.distribution.BinomialDistribution (HH1)
      explanation: The method `cumulativeProbability(int x)` in `BinomialDistribution` handles edge cases by returning 0.0 when `x` is less than 0 and 1.0 when `x` is greater than or equal to the number of trials. This suggests that the method is designed ...
  5. org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction(): 0.300 — best hypothesis H1: Hypothesis H1: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the probability parameter is set to 0 or 1. (confidence 0.700); supporting class org.apache.commons.math3.util.ContinuedFraction (HH2)
      explanation: The method `org.apache.commons.math3.util.ContinuedFraction.ContinuedFraction()` is a default protected constructor that initializes a `ContinuedFraction` instance and does not directly handle any calculations or edge cases related to th...
  6. org.apache.commons.math3.special.Beta.logBeta(double,double,double,int): 0.200 — best hypothesis H1: Hypothesis H1: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the probability parameter is set to 0 or 1. (confidence 0.700); supporting class org.apache.commons.math3.special.Beta (HH1)
      explanation: The method `org.apache.commons.math3.special.Beta.logBeta(double, double, double, int)` calculates the natural logarithm of the beta function, which is a component in the computation of the regularized beta function used in binomial dist...
  7. org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double): 0.200 — best hypothesis H1: Hypothesis H1: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the probability parameter is set to 0 or 1. (confidence 0.700); supporting class org.apache.commons.math3.distribution.FDistribution (HH2)
      explanation: The method `org.apache.commons.math3.distribution.FDistribution.cumulativeProbability(double)` primarily deals with calculating cumulative probabilities for F-distributions, which is different from the binomial distribution context in th...
  8. org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double,double): 0.100 — best hypothesis H1: Hypothesis H1: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the probability parameter is set to 0 or 1. (confidence 0.700); supporting class org.apache.commons.math3.distribution.FDistribution (HH2)
      explanation: The method `org.apache.commons.math3.distribution.FDistribution.FDistribution(double, double, double)` is unrelated to the hypothesis H1 concerning edge cases in the binomial distribution calculation. The FDistribution constructor deals ...
  9. org.apache.commons.math3.distribution.FDistribution.FDistribution(double,double): 0.100 — best hypothesis H1: Hypothesis H1: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the probability parameter is set to 0 or 1. (confidence 0.700); supporting class org.apache.commons.math3.distribution.FDistribution (HH2)
      explanation: The method `org.apache.commons.math3.distribution.FDistribution.FDistribution(double, double)` is unrelated to the hypothesis H1 regarding the failure in `testMath718`. The FDistribution constructor deals with creating an F distribution ...
  10. org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy(): 0.100 — best hypothesis H1: Hypothesis H1: The failure in "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718" could be due to incorrect handling of edge cases in the binomial distribution calculation, such as when the probability parameter is set to 0 or 1. (confidence 0.700); supporting class org.apache.commons.math3.distribution.FDistribution (HH2)
      explanation: The method `org.apache.commons.math3.distribution.FDistribution.getSolverAbsoluteAccuracy()` returns the solver's absolute accuracy, which is a precision parameter used in numerical calculations. This method does not directly relate to t...

📊 Token Usage Summary:
  Total API calls: 165
  Total tokens: 89,801
  Prompt tokens: 78,923
  Completion tokens: 10,878
Results written to defects4j_batch_results/Math-31_parallel_case/Math-31_parallel_answer.csv
Token usage written to defects4j_batch_results/Math-31_parallel_case/Math-31_token_usage.csv
Summary written to defects4j_batch_results/Math-31_parallel_case/Math-31_parallel_summary.md
