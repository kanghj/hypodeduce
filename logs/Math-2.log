=== GPT-only pipeline for Math-2 ===
  📊 GPT[hypothesis H1] tokens: 80 prompt + 38 completion = 118 total
  📊 GPT[hypothesis H2] tokens: 80 prompt + 44 completion = 124 total
  📊 GPT[hypothesis H3] tokens: 80 prompt + 35 completion = 115 total
  📊 GPT[hypothesis H4] tokens: 80 prompt + 29 completion = 109 total
  📊 GPT[hypothesis H5] tokens: 80 prompt + 28 completion = 108 total
  📊 GPT[hypothesis_confidence H1] tokens: 99 prompt + 3 completion = 102 total
  📊 GPT[hypothesis_confidence H2] tokens: 105 prompt + 3 completion = 108 total
  📊 GPT[hypothesis_confidence H3] tokens: 96 prompt + 3 completion = 99 total
  📊 GPT[hypothesis_confidence H4] tokens: 90 prompt + 3 completion = 93 total
  📊 GPT[hypothesis_confidence H5] tokens: 89 prompt + 3 completion = 92 total
Hypotheses:
  H1 (confidence 0.700): Hypothesis H1: The failure in "testMath1021" may be caused by incorrect parameter values being passed to the HypergeometricDistribution constructor, leading to unexpected behavior or results.
  H2 (confidence 0.700): Hypothesis H2: The failure in "testMath1021" could be due to incorrect handling of edge cases in the HypergeometricDistribution implementation, such as when the sample size is greater than the population size.
  H3 (confidence 0.700): Hypothesis H3: The failure in "testMath1021" could be due to incorrect assumptions about the distribution parameters leading to an invalid calculation of probabilities in edge cases.
  H4 (confidence 0.700): Hypothesis H4: The failure might be caused by incorrect assumptions about the distribution parameters leading to edge cases not being handled properly in the test.
  H5 (confidence 0.700): Hypothesis H5: The failure may be caused by incorrect assumptions about the distribution parameters leading to an invalid calculation of probabilities in edge cases.
Ignoring 7 covered classes without method coverage
    ▶️ GPT[class pre-ranking] running 1 prompts
  📊 GPT[class_pre_rank org.apache.commons.math3.distribution.HypergeometricDistribution] tokens: 701 prompt + 63 completion = 764 total
    ✅ GPT[class pre-ranking] completed; taking top 5
Candidate classes:
  org.apache.commons.math3.distribution.HypergeometricDistribution: n/a ```json
{"score": 0.9, "reason": "The failure occurs in the HypergeometricDistribution class, where the sample method returns a negative value, which violates the expected range. This suggests a bug in the sampling logic, making this class the most likely location for the fix."}
```
Collected 10 methods across candidate classes
    ▶️ GPT[method pre-ranking] running 10 prompts
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int)] tokens: 751 prompt + 64 completion = 815 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int)] tokens: 738 prompt + 60 completion = 798 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance()] tokens: 666 prompt + 55 completion = 721 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses()] tokens: 621 prompt + 55 completion = 676 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean()] tokens: 668 prompt + 75 completion = 743 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance()] tokens: 628 prompt + 47 completion = 675 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize()] tokens: 613 prompt + 55 completion = 668 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize()] tokens: 613 prompt + 60 completion = 673 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound()] tokens: 684 prompt + 87 completion = 771 total
  📊 GPT[method_pre_rank org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound()] tokens: 663 prompt + 75 completion = 738 total
    ✅ GPT[method pre-ranking] completed
Selected 10 candidate methods
  📊 GPT[class_score org.apache.commons.math3.distribution.HypergeometricDistribution H1] tokens: 411 prompt + 3 completion = 414 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.HypergeometricDistribution H1] tokens: 388 prompt + 169 completion = 557 total
  📊 GPT[class_score org.apache.commons.math3.distribution.HypergeometricDistribution H2] tokens: 417 prompt + 3 completion = 420 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.HypergeometricDistribution H2] tokens: 394 prompt + 158 completion = 552 total
  📊 GPT[class_score org.apache.commons.math3.distribution.HypergeometricDistribution H3] tokens: 408 prompt + 3 completion = 411 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.HypergeometricDistribution H3] tokens: 385 prompt + 149 completion = 534 total
  📊 GPT[class_score org.apache.commons.math3.distribution.HypergeometricDistribution H4] tokens: 402 prompt + 3 completion = 405 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.HypergeometricDistribution H4] tokens: 379 prompt + 145 completion = 524 total
  📊 GPT[class_score org.apache.commons.math3.distribution.HypergeometricDistribution H5] tokens: 401 prompt + 3 completion = 404 total
  📊 GPT[class_explanation org.apache.commons.math3.distribution.HypergeometricDistribution H5] tokens: 378 prompt + 161 completion = 539 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int) H1] tokens: 506 prompt + 3 completion = 509 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int) H1] tokens: 443 prompt + 160 completion = 603 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound() H1] tokens: 452 prompt + 3 completion = 455 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound() H1] tokens: 430 prompt + 149 completion = 579 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound() H1] tokens: 431 prompt + 3 completion = 434 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound() H1] tokens: 409 prompt + 151 completion = 560 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance() H1] tokens: 430 prompt + 3 completion = 433 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance() H1] tokens: 405 prompt + 131 completion = 536 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses() H1] tokens: 386 prompt + 3 completion = 389 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses() H1] tokens: 361 prompt + 127 completion = 488 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean() H1] tokens: 432 prompt + 3 completion = 435 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean() H1] tokens: 407 prompt + 163 completion = 570 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance() H1] tokens: 393 prompt + 3 completion = 396 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance() H1] tokens: 368 prompt + 131 completion = 499 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize() H1] tokens: 378 prompt + 3 completion = 381 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize() H1] tokens: 353 prompt + 124 completion = 477 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize() H1] tokens: 378 prompt + 3 completion = 381 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize() H1] tokens: 353 prompt + 136 completion = 489 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int) H1] tokens: 553 prompt + 3 completion = 556 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int) H1] tokens: 434 prompt + 179 completion = 613 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int) H2] tokens: 512 prompt + 3 completion = 515 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int) H2] tokens: 449 prompt + 140 completion = 589 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound() H2] tokens: 458 prompt + 3 completion = 461 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound() H2] tokens: 436 prompt + 160 completion = 596 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound() H2] tokens: 437 prompt + 3 completion = 440 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound() H2] tokens: 415 prompt + 136 completion = 551 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance() H2] tokens: 436 prompt + 3 completion = 439 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance() H2] tokens: 411 prompt + 166 completion = 577 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses() H2] tokens: 392 prompt + 3 completion = 395 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses() H2] tokens: 367 prompt + 137 completion = 504 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean() H2] tokens: 438 prompt + 3 completion = 441 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean() H2] tokens: 413 prompt + 141 completion = 554 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance() H2] tokens: 399 prompt + 3 completion = 402 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance() H2] tokens: 374 prompt + 112 completion = 486 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize() H2] tokens: 384 prompt + 3 completion = 387 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize() H2] tokens: 359 prompt + 127 completion = 486 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize() H2] tokens: 384 prompt + 3 completion = 387 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize() H2] tokens: 359 prompt + 120 completion = 479 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int) H2] tokens: 559 prompt + 3 completion = 562 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int) H2] tokens: 440 prompt + 148 completion = 588 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int) H3] tokens: 503 prompt + 3 completion = 506 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int) H3] tokens: 440 prompt + 145 completion = 585 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound() H3] tokens: 449 prompt + 3 completion = 452 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound() H3] tokens: 427 prompt + 165 completion = 592 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound() H3] tokens: 428 prompt + 3 completion = 431 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound() H3] tokens: 406 prompt + 140 completion = 546 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance() H3] tokens: 427 prompt + 3 completion = 430 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance() H3] tokens: 402 prompt + 122 completion = 524 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses() H3] tokens: 383 prompt + 3 completion = 386 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses() H3] tokens: 358 prompt + 124 completion = 482 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean() H3] tokens: 429 prompt + 3 completion = 432 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean() H3] tokens: 404 prompt + 159 completion = 563 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance() H3] tokens: 390 prompt + 3 completion = 393 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance() H3] tokens: 365 prompt + 105 completion = 470 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize() H3] tokens: 375 prompt + 3 completion = 378 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize() H3] tokens: 350 prompt + 92 completion = 442 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize() H3] tokens: 375 prompt + 3 completion = 378 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize() H3] tokens: 350 prompt + 134 completion = 484 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int) H3] tokens: 550 prompt + 3 completion = 553 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int) H3] tokens: 431 prompt + 156 completion = 587 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int) H4] tokens: 497 prompt + 3 completion = 500 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int) H4] tokens: 434 prompt + 127 completion = 561 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound() H4] tokens: 443 prompt + 3 completion = 446 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound() H4] tokens: 421 prompt + 158 completion = 579 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound() H4] tokens: 422 prompt + 3 completion = 425 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound() H4] tokens: 400 prompt + 129 completion = 529 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance() H4] tokens: 421 prompt + 3 completion = 424 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance() H4] tokens: 396 prompt + 129 completion = 525 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses() H4] tokens: 377 prompt + 3 completion = 380 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses() H4] tokens: 352 prompt + 127 completion = 479 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean() H4] tokens: 423 prompt + 3 completion = 426 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean() H4] tokens: 398 prompt + 155 completion = 553 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance() H4] tokens: 384 prompt + 3 completion = 387 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance() H4] tokens: 359 prompt + 138 completion = 497 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize() H4] tokens: 369 prompt + 3 completion = 372 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize() H4] tokens: 344 prompt + 122 completion = 466 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize() H4] tokens: 369 prompt + 3 completion = 372 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize() H4] tokens: 344 prompt + 146 completion = 490 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int) H4] tokens: 544 prompt + 3 completion = 547 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int) H4] tokens: 425 prompt + 148 completion = 573 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int) H5] tokens: 496 prompt + 3 completion = 499 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int) H5] tokens: 433 prompt + 152 completion = 585 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound() H5] tokens: 442 prompt + 3 completion = 445 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound() H5] tokens: 420 prompt + 153 completion = 573 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound() H5] tokens: 421 prompt + 3 completion = 424 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound() H5] tokens: 399 prompt + 136 completion = 535 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance() H5] tokens: 420 prompt + 3 completion = 423 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance() H5] tokens: 395 prompt + 103 completion = 498 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses() H5] tokens: 376 prompt + 3 completion = 379 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses() H5] tokens: 351 prompt + 143 completion = 494 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean() H5] tokens: 422 prompt + 3 completion = 425 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean() H5] tokens: 397 prompt + 161 completion = 558 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance() H5] tokens: 383 prompt + 3 completion = 386 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance() H5] tokens: 358 prompt + 106 completion = 464 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize() H5] tokens: 368 prompt + 3 completion = 371 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize() H5] tokens: 343 prompt + 113 completion = 456 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize() H5] tokens: 368 prompt + 3 completion = 371 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize() H5] tokens: 343 prompt + 103 completion = 446 total
  📊 GPT[method_score org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int) H5] tokens: 543 prompt + 3 completion = 546 total
  📊 GPT[method_explanation org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int) H5] tokens: 424 prompt + 130 completion = 554 total
  🔀 Tie-breaking 4 methods with score 0.800000
  📊 GPT[method_tie_break] tokens: 1855 prompt + 144 completion = 1999 total
  🔍 Raw tie-breaking response: ```json
[
  {"method": "org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound", "tie_break_score": 0.95},
  {"method": "org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int)", "tie_break_score": 0.82},
  {"method": "org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int)", "tie_break_score": 0.65},
  {"method": "org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound", "tie_break_score": 0.43}
]
```
    ❌ JSON parse attempt 1 failed: Expecting value: line 1 column 1 (char 0)
    ✅ Successfully parsed JSON attempt 2
    🔍 Parsed object type: <class 'list'>
    🔍 Parsed object content: [{'method': 'org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound', 'tie_break_score': 0.95}, {'method': 'org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int)', 'tie_break_score': 0.82}, {'method': 'org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int)', 'tie_break_score': 0.65}, {'method': 'org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound', 'tie_break_score': 0.43}]
    ⚠️  Method 'org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound' not in expected methods list
    🔍 Processing method: org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int), value: 0.82 (type: <class 'float'>)
    🔍 Coerced to: 0.82
    📝 Recorded org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int): 0.82 -> 0.82
    🔍 Processing method: org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int), value: 0.65 (type: <class 'float'>)
    🔍 Coerced to: 0.65
    📝 Recorded org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int): 0.65 -> 0.65
    ⚠️  Method 'org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound' not in expected methods list
  📊 Parsed tie-breaking scores: {'org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int)': 1.0, 'org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int)': 0.7926829268292683}
  🎯 Tie-breaking scores: {'org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int)': 1.0, 'org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int)': 0.7926829268292683}
    org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int): 0.800000 + 0.010000 = 0.810000
    org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int): 0.800000 + 0.007927 = 0.807927
  ✅ Final ranking after tie-breaking:
    1. org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int): 0.810000
    2. org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int): 0.807927
    3. org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound(): 0.800000
    4. org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound(): 0.800000

Top suspicious methods:
  1. org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int,int,int): 0.810 — best hypothesis H1: Hypothesis H1: The failure in "testMath1021" may be caused by incorrect parameter values being passed to the HypergeometricDistribution constructor, leading to unexpected behavior or results. (confidence 0.700); supporting class org.apache.commons.math3.distribution.HypergeometricDistribution (HH2)
      explanation: The method `HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize)` constructs a hypergeometric distribution using the specified parameters: population size (N), number of successes in the population (m), a...
  2. org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(RandomGenerator,int,int,int): 0.808 — best hypothesis H1: Hypothesis H1: The failure in "testMath1021" may be caused by incorrect parameter values being passed to the HypergeometricDistribution constructor, leading to unexpected behavior or results. (confidence 0.700); supporting class org.apache.commons.math3.distribution.HypergeometricDistribution (HH2)
      explanation: The method `HypergeometricDistribution(RandomGenerator rng, int populationSize, int numberOfSuccesses, int sampleSize)` is designed to initialize a hypergeometric distribution with specified parameters: `populationSize`, `numberOfSuccess...
  3. org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound(): 0.800 — best hypothesis H1: Hypothesis H1: The failure in "testMath1021" may be caused by incorrect parameter values being passed to the HypergeometricDistribution constructor, leading to unexpected behavior or results. (confidence 0.700); supporting class org.apache.commons.math3.distribution.HypergeometricDistribution (HH2)
      explanation: The method `getSupportLowerBound()` calculates the lower bound of the support for the hypergeometric distribution as `max(0, n + m - N)`. Given the test parameters `N = 43130568`, `m = 42976365`, and `n = 50`, the calculation becomes `ma...
  4. org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound(): 0.800 — best hypothesis H4: Hypothesis H4: The failure might be caused by incorrect assumptions about the distribution parameters leading to edge cases not being handled properly in the test. (confidence 0.700); supporting class org.apache.commons.math3.distribution.HypergeometricDistribution (HH2)
      explanation: The method `getSupportUpperBound()` returns the minimum of the number of successes `m` and the sample size `n`, which in this case is `min(42976365, 50) = 50`. This supports Hypothesis H4 because the test expects samples to be between 0 ...
  5. org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance(): 0.300 — best hypothesis H3: Hypothesis H3: The failure in "testMath1021" could be due to incorrect assumptions about the distribution parameters leading to an invalid calculation of probabilities in edge cases. (confidence 0.700); supporting class org.apache.commons.math3.distribution.HypergeometricDistribution (HH2)
      explanation: The method `calculateNumericalVariance()` computes the variance of the hypergeometric distribution using the parameters `N`, `m`, and `n`, which are the population size, number of successes, and sample size, respectively. The failure in ...
  6. org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean(): 0.300 — best hypothesis H5: Hypothesis H5: The failure may be caused by incorrect assumptions about the distribution parameters leading to an invalid calculation of probabilities in edge cases. (confidence 0.700); supporting class org.apache.commons.math3.distribution.HypergeometricDistribution (HH2)
      explanation: The method `getNumericalMean()` computes the mean of the hypergeometric distribution using the formula `n * m / N`, where `n` is the sample size, `m` is the number of successes, and `N` is the population size. In the test case, these val...
  7. org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance(): 0.300 — best hypothesis H5: Hypothesis H5: The failure may be caused by incorrect assumptions about the distribution parameters leading to an invalid calculation of probabilities in edge cases. (confidence 0.700); supporting class org.apache.commons.math3.distribution.HypergeometricDistribution (HH2)
      explanation: The method `getNumericalVariance()` calculates the variance of the hypergeometric distribution, which is crucial for understanding the spread of the distribution's outcomes. If the variance calculation is incorrect due to invalid assumpt...
  8. org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses(): 0.200 — best hypothesis H2: Hypothesis H2: The failure in "testMath1021" could be due to incorrect handling of edge cases in the HypergeometricDistribution implementation, such as when the sample size is greater than the population size. (confidence 0.700); supporting class org.apache.commons.math3.distribution.HypergeometricDistribution (HH2)
      explanation: The method `getNumberOfSuccesses()` returns the value of the field `numberOfSuccesses`, which corresponds to the parameter `m` in the test. In the test `testMath1021`, `m` is set to 42976365, which is less than the population size `N` (4...
  9. org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize(): 0.100 — best hypothesis H1: Hypothesis H1: The failure in "testMath1021" may be caused by incorrect parameter values being passed to the HypergeometricDistribution constructor, leading to unexpected behavior or results. (confidence 0.700); supporting class org.apache.commons.math3.distribution.HypergeometricDistribution (HH2)
      explanation: The method `org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize()` simply returns the value of the `populationSize` field, which is set during the construction of the `HypergeometricDistribution` object. In...
  10. org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize(): 0.100 — best hypothesis H1: Hypothesis H1: The failure in "testMath1021" may be caused by incorrect parameter values being passed to the HypergeometricDistribution constructor, leading to unexpected behavior or results. (confidence 0.700); supporting class org.apache.commons.math3.distribution.HypergeometricDistribution (HH2)
      explanation: The method `org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize()` returns the value of the field `sampleSize`, which corresponds to the parameter `n` passed to the constructor of `HypergeometricDistribution`. ...

📊 Token Usage Summary:
  Total API calls: 132
  Total tokens: 64,068
  Prompt tokens: 55,233
  Completion tokens: 8,835
Results written to defects4j_batch_results/Math-2_parallel_case/Math-2_parallel_answer.csv
Token usage written to defects4j_batch_results/Math-2_parallel_case/Math-2_token_usage.csv
Summary written to defects4j_batch_results/Math-2_parallel_case/Math-2_parallel_summary.md
