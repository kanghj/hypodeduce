=== GPT-only pipeline for Time-18 ===
  📊 GPT[hypothesis H1] tokens: 78 prompt + 54 completion = 132 total
  📊 GPT[hypothesis H2] tokens: 78 prompt + 42 completion = 120 total
  📊 GPT[hypothesis H3] tokens: 78 prompt + 37 completion = 115 total
  📊 GPT[hypothesis H4] tokens: 78 prompt + 36 completion = 114 total
  📊 GPT[hypothesis H5] tokens: 78 prompt + 33 completion = 111 total
  📊 GPT[hypothesis_confidence H1] tokens: 115 prompt + 3 completion = 118 total
  📊 GPT[hypothesis_confidence H2] tokens: 103 prompt + 3 completion = 106 total
  📊 GPT[hypothesis_confidence H3] tokens: 98 prompt + 3 completion = 101 total
  📊 GPT[hypothesis_confidence H4] tokens: 97 prompt + 3 completion = 100 total
  📊 GPT[hypothesis_confidence H5] tokens: 94 prompt + 3 completion = 97 total
Hypotheses:
  H1 (confidence 0.700): Hypothesis H1: The failure in "org.joda.time.chrono.TestGJChronology::testLeapYearRulesConstruction" may be caused by an incorrect implementation of leap year rules in the GJChronology class, leading to miscalculation of leap years.
  H2 (confidence 0.700): Hypothesis H2: The failure may be caused by incorrect handling of leap year rules in the GJChronology class, potentially due to a miscalculation or oversight in the algorithm that determines leap years.
  H3 (confidence 0.700): Hypothesis H3: The failure may be caused by incorrect handling of leap year rules in the GJChronology class when constructing dates around the transition from Julian to Gregorian calendar systems.
  H4 (confidence 0.700): Hypothesis H4: The failure might be caused by incorrect handling of leap year rules in the GJChronology class when constructing dates around the transition from Julian to Gregorian calendar.
  H5 (confidence 0.700): Hypothesis H5: The failure might be caused by incorrect handling of leap year rules in the GJChronology class when transitioning between Julian and Gregorian calendar systems.
Ignoring 52 covered classes without method coverage
    ▶️ GPT[class pre-ranking] running 1 prompts
  📊 GPT[class_pre_rank org.joda.time.chrono.GJChronology] tokens: 693 prompt + 67 completion = 760 total
    ✅ GPT[class pre-ranking] completed; taking top 5
Candidate classes:
  org.joda.time.chrono.GJChronology: n/a ```json
{"score": 0.9, "reason": "The failure occurs in the GJChronology class when handling a date that is a leap year in the Julian calendar but not in the Gregorian calendar. The error suggests a miscalculation in the leap year rules within the GJChronology implementation."}
```
Collected 7 methods across candidate classes
    ▶️ GPT[method pre-ranking] running 7 prompts
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology$CutoverField.getDurationField()] tokens: 567 prompt + 75 completion = 642 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.assemble(Fields)] tokens: 647 prompt + 88 completion = 735 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology)] tokens: 639 prompt + 75 completion = 714 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int)] tokens: 724 prompt + 72 completion = 796 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int)] tokens: 657 prompt + 87 completion = 744 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.getInstanceUTC()] tokens: 638 prompt + 68 completion = 706 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.julianToGregorianByYear(long)] tokens: 630 prompt + 78 completion = 708 total
    ✅ GPT[method pre-ranking] completed
Selected 7 candidate methods
  📊 GPT[class_score org.joda.time.chrono.GJChronology H1] tokens: 429 prompt + 3 completion = 432 total
  📊 GPT[class_explanation org.joda.time.chrono.GJChronology H1] tokens: 407 prompt + 200 completion = 607 total
  📊 GPT[class_score org.joda.time.chrono.GJChronology H2] tokens: 417 prompt + 3 completion = 420 total
  📊 GPT[class_explanation org.joda.time.chrono.GJChronology H2] tokens: 395 prompt + 204 completion = 599 total
  📊 GPT[class_score org.joda.time.chrono.GJChronology H3] tokens: 412 prompt + 3 completion = 415 total
  📊 GPT[class_explanation org.joda.time.chrono.GJChronology H3] tokens: 390 prompt + 156 completion = 546 total
  📊 GPT[class_score org.joda.time.chrono.GJChronology H4] tokens: 411 prompt + 3 completion = 414 total
  📊 GPT[class_explanation org.joda.time.chrono.GJChronology H4] tokens: 389 prompt + 188 completion = 577 total
  📊 GPT[class_score org.joda.time.chrono.GJChronology H5] tokens: 408 prompt + 3 completion = 411 total
  📊 GPT[class_explanation org.joda.time.chrono.GJChronology H5] tokens: 386 prompt + 167 completion = 553 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int) H1] tokens: 567 prompt + 3 completion = 570 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int) H1] tokens: 460 prompt + 123 completion = 583 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstanceUTC() H1] tokens: 436 prompt + 3 completion = 439 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstanceUTC() H1] tokens: 412 prompt + 156 completion = 568 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.assemble(Fields) H1] tokens: 444 prompt + 3 completion = 447 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.assemble(Fields) H1] tokens: 419 prompt + 128 completion = 547 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H1] tokens: 436 prompt + 3 completion = 439 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H1] tokens: 411 prompt + 134 completion = 545 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H1] tokens: 427 prompt + 3 completion = 430 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H1] tokens: 402 prompt + 141 completion = 543 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H1] tokens: 455 prompt + 3 completion = 458 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H1] tokens: 430 prompt + 160 completion = 590 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H1] tokens: 411 prompt + 3 completion = 414 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H1] tokens: 387 prompt + 131 completion = 518 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int) H2] tokens: 555 prompt + 3 completion = 558 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int) H2] tokens: 448 prompt + 155 completion = 603 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstanceUTC() H2] tokens: 424 prompt + 3 completion = 427 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstanceUTC() H2] tokens: 400 prompt + 170 completion = 570 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.assemble(Fields) H2] tokens: 432 prompt + 3 completion = 435 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.assemble(Fields) H2] tokens: 407 prompt + 124 completion = 531 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H2] tokens: 424 prompt + 3 completion = 427 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H2] tokens: 399 prompt + 144 completion = 543 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H2] tokens: 415 prompt + 3 completion = 418 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H2] tokens: 390 prompt + 144 completion = 534 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H2] tokens: 443 prompt + 3 completion = 446 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H2] tokens: 418 prompt + 153 completion = 571 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H2] tokens: 399 prompt + 3 completion = 402 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H2] tokens: 375 prompt + 120 completion = 495 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int) H3] tokens: 550 prompt + 3 completion = 553 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int) H3] tokens: 443 prompt + 147 completion = 590 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstanceUTC() H3] tokens: 419 prompt + 3 completion = 422 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstanceUTC() H3] tokens: 395 prompt + 131 completion = 526 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.assemble(Fields) H3] tokens: 427 prompt + 3 completion = 430 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.assemble(Fields) H3] tokens: 402 prompt + 145 completion = 547 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H3] tokens: 419 prompt + 3 completion = 422 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H3] tokens: 394 prompt + 152 completion = 546 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H3] tokens: 410 prompt + 3 completion = 413 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H3] tokens: 385 prompt + 151 completion = 536 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H3] tokens: 438 prompt + 3 completion = 441 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H3] tokens: 413 prompt + 167 completion = 580 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H3] tokens: 394 prompt + 3 completion = 397 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H3] tokens: 370 prompt + 118 completion = 488 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int) H4] tokens: 549 prompt + 3 completion = 552 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int) H4] tokens: 442 prompt + 140 completion = 582 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstanceUTC() H4] tokens: 418 prompt + 3 completion = 421 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstanceUTC() H4] tokens: 394 prompt + 130 completion = 524 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.assemble(Fields) H4] tokens: 426 prompt + 3 completion = 429 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.assemble(Fields) H4] tokens: 401 prompt + 127 completion = 528 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H4] tokens: 418 prompt + 3 completion = 421 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H4] tokens: 393 prompt + 127 completion = 520 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H4] tokens: 409 prompt + 3 completion = 412 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H4] tokens: 384 prompt + 145 completion = 529 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H4] tokens: 437 prompt + 3 completion = 440 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H4] tokens: 412 prompt + 155 completion = 567 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H4] tokens: 393 prompt + 3 completion = 396 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H4] tokens: 369 prompt + 139 completion = 508 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int) H5] tokens: 546 prompt + 3 completion = 549 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int) H5] tokens: 439 prompt + 155 completion = 594 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstanceUTC() H5] tokens: 415 prompt + 3 completion = 418 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstanceUTC() H5] tokens: 391 prompt + 133 completion = 524 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.assemble(Fields) H5] tokens: 423 prompt + 3 completion = 426 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.assemble(Fields) H5] tokens: 398 prompt + 118 completion = 516 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H5] tokens: 415 prompt + 3 completion = 418 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H5] tokens: 390 prompt + 139 completion = 529 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H5] tokens: 406 prompt + 3 completion = 409 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H5] tokens: 381 prompt + 143 completion = 524 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H5] tokens: 434 prompt + 3 completion = 437 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H5] tokens: 409 prompt + 140 completion = 549 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H5] tokens: 390 prompt + 3 completion = 393 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H5] tokens: 366 prompt + 118 completion = 484 total
  🔀 Tie-breaking 4 methods with score 0.800000
  📊 GPT[method_tie_break] tokens: 1902 prompt + 132 completion = 2034 total
  🔍 Raw tie-breaking response: ```json
[
  {"method": "org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int)", "tie_break_score": 0.95},
  {"method": "org.joda.time.chrono.GJChronology.julianToGregorianByYear(long)", "tie_break_score": 0.82},
  {"method": "org.joda.time.chrono.GJChronology.assemble(Fields)", "tie_break_score": 0.65},
  {"method": "org.joda.time.chrono.GJChronology.getInstanceUTC()", "tie_break_score": 0.43}
]
```
    ❌ JSON parse attempt 1 failed: Expecting value: line 1 column 1 (char 0)
    ✅ Successfully parsed JSON attempt 2
    🔍 Parsed object type: <class 'list'>
    🔍 Parsed object content: [{'method': 'org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int)', 'tie_break_score': 0.95}, {'method': 'org.joda.time.chrono.GJChronology.julianToGregorianByYear(long)', 'tie_break_score': 0.82}, {'method': 'org.joda.time.chrono.GJChronology.assemble(Fields)', 'tie_break_score': 0.65}, {'method': 'org.joda.time.chrono.GJChronology.getInstanceUTC()', 'tie_break_score': 0.43}]
    🔍 Processing method: org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int), value: 0.95 (type: <class 'float'>)
    🔍 Coerced to: 0.95
    📝 Recorded org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int): 0.95 -> 0.95
    🔍 Processing method: org.joda.time.chrono.GJChronology.julianToGregorianByYear(long), value: 0.82 (type: <class 'float'>)
    🔍 Coerced to: 0.82
    📝 Recorded org.joda.time.chrono.GJChronology.julianToGregorianByYear(long): 0.82 -> 0.82
    🔍 Processing method: org.joda.time.chrono.GJChronology.assemble(Fields), value: 0.65 (type: <class 'float'>)
    🔍 Coerced to: 0.65
    📝 Recorded org.joda.time.chrono.GJChronology.assemble(Fields): 0.65 -> 0.65
    🔍 Processing method: org.joda.time.chrono.GJChronology.getInstanceUTC(), value: 0.43 (type: <class 'float'>)
    🔍 Coerced to: 0.43
    📝 Recorded org.joda.time.chrono.GJChronology.getInstanceUTC(): 0.43 -> 0.43
  📊 Parsed tie-breaking scores: {'org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int)': 1.0, 'org.joda.time.chrono.GJChronology.julianToGregorianByYear(long)': 0.8631578947368421, 'org.joda.time.chrono.GJChronology.assemble(Fields)': 0.6842105263157895, 'org.joda.time.chrono.GJChronology.getInstanceUTC()': 0.45263157894736844}
  🎯 Tie-breaking scores: {'org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int)': 1.0, 'org.joda.time.chrono.GJChronology.julianToGregorianByYear(long)': 0.8631578947368421, 'org.joda.time.chrono.GJChronology.assemble(Fields)': 0.6842105263157895, 'org.joda.time.chrono.GJChronology.getInstanceUTC()': 0.45263157894736844}
    org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int): 0.800000 + 0.010000 = 0.810000
    org.joda.time.chrono.GJChronology.getInstanceUTC(): 0.800000 + 0.004526 = 0.804526
    org.joda.time.chrono.GJChronology.assemble(Fields): 0.800000 + 0.006842 = 0.806842
    org.joda.time.chrono.GJChronology.julianToGregorianByYear(long): 0.800000 + 0.008632 = 0.808632
  ✅ Final ranking after tie-breaking:
    1. org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int): 0.810000
    2. org.joda.time.chrono.GJChronology.julianToGregorianByYear(long): 0.808632
    3. org.joda.time.chrono.GJChronology.assemble(Fields): 0.806842
    4. org.joda.time.chrono.GJChronology.getInstanceUTC(): 0.804526

Top suspicious methods:
  1. org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int): 0.810 — best hypothesis H1: Hypothesis H1: The failure in "org.joda.time.chrono.TestGJChronology::testLeapYearRulesConstruction" may be caused by an incorrect implementation of leap year rules in the GJChronology class, leading to miscalculation of leap years. (confidence 0.700); supporting class org.joda.time.chrono.GJChronology (HH3)
      explanation: The method `org.joda.time.chrono.GJChronology.getDateTimeMillis(int, int, int, int, int, int, int)` supports Hypothesis H1. The failure occurs because the method defaults to using the Gregorian chronology, which does not consider 1500 as...
  2. org.joda.time.chrono.GJChronology.julianToGregorianByYear(long): 0.809 — best hypothesis H2: Hypothesis H2: The failure may be caused by incorrect handling of leap year rules in the GJChronology class, potentially due to a miscalculation or oversight in the algorithm that determines leap years. (confidence 0.700); supporting class org.joda.time.chrono.GJChronology (HH3)
      explanation: The method `org.joda.time.chrono.GJChronology.julianToGregorianByYear(long)` supports Hypothesis H2 by potentially contributing to the failure through its conversion process. It calls `convertByYear(long, Chronology, Chronology)` to tran...
  3. org.joda.time.chrono.GJChronology.assemble(Fields): 0.807 — best hypothesis H3: Hypothesis H3: The failure may be caused by incorrect handling of leap year rules in the GJChronology class when constructing dates around the transition from Julian to Gregorian calendar systems. (confidence 0.700); supporting class org.joda.time.chrono.GJChronology (HH3)
      explanation: The method `org.joda.time.chrono.GJChronology.assemble(Fields)` supports Hypothesis H3 by setting up the internal state and fields of the chronology, including handling the transition between Julian and Gregorian calendars. The failure o...
  4. org.joda.time.chrono.GJChronology.getInstanceUTC(): 0.805 — best hypothesis H3: Hypothesis H3: The failure may be caused by incorrect handling of leap year rules in the GJChronology class when constructing dates around the transition from Julian to Gregorian calendar systems. (confidence 0.700); supporting class org.joda.time.chrono.GJChronology (HH3)
      explanation: The method `org.joda.time.chrono.GJChronology.getInstanceUTC()` supports Hypothesis H3 by potentially contributing to the failure due to its handling of leap year rules around the Julian to Gregorian transition. The method returns a `GJC...
  5. org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology): 0.700 — best hypothesis H2: Hypothesis H2: The failure may be caused by incorrect handling of leap year rules in the GJChronology class, potentially due to a miscalculation or oversight in the algorithm that determines leap years. (confidence 0.700); supporting class org.joda.time.chrono.GJChronology (HH3)
      explanation: The method `org.joda.time.chrono.GJChronology.convertByYear(long, Chronology, Chronology)` supports Hypothesis H2 by potentially contributing to the failure through its role in converting date-time instants between chronologies. If the m...
  6. org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int): 0.700 — best hypothesis H3: Hypothesis H3: The failure may be caused by incorrect handling of leap year rules in the GJChronology class when constructing dates around the transition from Julian to Gregorian calendar systems. (confidence 0.700); supporting class org.joda.time.chrono.GJChronology (HH3)
      explanation: The method `org.joda.time.chrono.GJChronology.getInstance(DateTimeZone, ReadableInstant, int)` supports Hypothesis H3 by indicating that the GJChronology class is designed to handle the transition between Julian and Gregorian calendars, ...
  7. org.joda.time.chrono.GJChronology$CutoverField.getDurationField(): 0.300 — best hypothesis H2: Hypothesis H2: The failure may be caused by incorrect handling of leap year rules in the GJChronology class, potentially due to a miscalculation or oversight in the algorithm that determines leap years. (confidence 0.700)
      explanation: The method `org.joda.time.chrono.GJChronology$CutoverField.getDurationField()` simply returns the stored `iDurationField` and does not directly involve any logic for calculating leap years. Therefore, it neither supports nor contradicts ...

📊 Token Usage Summary:
  Total API calls: 99
  Total tokens: 48,468
  Prompt tokens: 41,571
  Completion tokens: 6,897
Results written to defects4j_batch_results/Time-18_parallel_case/Time-18_parallel_answer.csv
Token usage written to defects4j_batch_results/Time-18_parallel_case/Time-18_token_usage.csv
Summary written to defects4j_batch_results/Time-18_parallel_case/Time-18_parallel_summary.md
