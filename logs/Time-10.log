=== GPT-only pipeline for Time-10 ===
  📊 GPT[hypothesis H1] tokens: 77 prompt + 37 completion = 114 total
  📊 GPT[hypothesis H2] tokens: 77 prompt + 29 completion = 106 total
  📊 GPT[hypothesis H3] tokens: 77 prompt + 29 completion = 106 total
  📊 GPT[hypothesis H4] tokens: 77 prompt + 29 completion = 106 total
  📊 GPT[hypothesis H5] tokens: 77 prompt + 29 completion = 106 total
  📊 GPT[hypothesis_confidence H1] tokens: 98 prompt + 3 completion = 101 total
  📊 GPT[hypothesis_confidence H2] tokens: 90 prompt + 3 completion = 93 total
  📊 GPT[hypothesis_confidence H3] tokens: 90 prompt + 3 completion = 93 total
  📊 GPT[hypothesis_confidence H4] tokens: 90 prompt + 3 completion = 93 total
  📊 GPT[hypothesis_confidence H5] tokens: 90 prompt + 3 completion = 93 total
Hypotheses:
  H1 (confidence 0.700): Hypothesis H1: The failure may be caused by an incorrect handling of leap years when calculating the number of days between two MonthDay instances, leading to an off-by-one error.
  H2 (confidence 0.700): Hypothesis H2: The failure might be caused by an incorrect handling of leap years when calculating the number of days between two MonthDay instances.
  H3 (confidence 0.700): Hypothesis H3: The failure may be caused by an incorrect handling of leap years when calculating the number of days between two MonthDay instances.
  H4 (confidence 0.700): Hypothesis H4: The failure may be caused by an incorrect handling of leap years when calculating the number of days between two MonthDay instances.
  H5 (confidence 0.700): Hypothesis H5: The failure might be caused by an incorrect handling of leap years when calculating the number of days between two MonthDay instances.
Ignoring 58 covered classes without method coverage
    ▶️ GPT[class pre-ranking] running 2 prompts
  📊 GPT[class_pre_rank org.joda.time.Days] tokens: 712 prompt + 54 completion = 766 total
  📊 GPT[class_pre_rank org.joda.time.Months] tokens: 731 prompt + 62 completion = 793 total
    ✅ GPT[class pre-ranking] completed; taking top 5
Candidate classes:
  org.joda.time.Days: n/a ```json
{"score": 0.9, "reason": "The error occurs in the 'daysBetween' method when calculating days between MonthDay instances, specifically when handling February 29, which suggests a leap year handling issue in the Days class."}
```
  org.joda.time.Months: n/a ```json
{"score": 0.2, "reason": "The error is related to handling days in a month, specifically February 29, which is not directly related to the 'Months' class. The issue likely lies in the 'Days' class or its handling of leap years."}
```
Collected 5 methods across candidate classes
    ▶️ GPT[method pre-ranking] running 5 prompts
  📊 GPT[method_pre_rank org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial)] tokens: 858 prompt + 85 completion = 943 total
  📊 GPT[method_pre_rank org.joda.time.Months.getFieldType()] tokens: 698 prompt + 61 completion = 759 total
  📊 GPT[method_pre_rank org.joda.time.Months.getMonths()] tokens: 718 prompt + 77 completion = 795 total
  📊 GPT[method_pre_rank org.joda.time.Months.months(int)] tokens: 721 prompt + 63 completion = 784 total
  📊 GPT[method_pre_rank org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial)] tokens: 857 prompt + 70 completion = 927 total
    ✅ GPT[method pre-ranking] completed
Selected 5 candidate methods
  📊 GPT[class_score org.joda.time.Days H1] tokens: 463 prompt + 3 completion = 466 total
  📊 GPT[class_explanation org.joda.time.Days H1] tokens: 442 prompt + 124 completion = 566 total
  📊 GPT[class_score org.joda.time.Months H1] tokens: 473 prompt + 3 completion = 476 total
  📊 GPT[class_explanation org.joda.time.Months H1] tokens: 452 prompt + 152 completion = 604 total
  📊 GPT[class_score org.joda.time.Days H2] tokens: 455 prompt + 3 completion = 458 total
  📊 GPT[class_explanation org.joda.time.Days H2] tokens: 434 prompt + 114 completion = 548 total
  📊 GPT[class_score org.joda.time.Months H2] tokens: 465 prompt + 3 completion = 468 total
  📊 GPT[class_explanation org.joda.time.Months H2] tokens: 444 prompt + 120 completion = 564 total
  📊 GPT[class_score org.joda.time.Days H3] tokens: 455 prompt + 3 completion = 458 total
  📊 GPT[class_explanation org.joda.time.Days H3] tokens: 434 prompt + 123 completion = 557 total
  📊 GPT[class_score org.joda.time.Months H3] tokens: 465 prompt + 3 completion = 468 total
  📊 GPT[class_explanation org.joda.time.Months H3] tokens: 444 prompt + 136 completion = 580 total
  📊 GPT[class_score org.joda.time.Days H4] tokens: 455 prompt + 3 completion = 458 total
  📊 GPT[class_explanation org.joda.time.Days H4] tokens: 434 prompt + 109 completion = 543 total
  📊 GPT[class_score org.joda.time.Months H4] tokens: 465 prompt + 3 completion = 468 total
  📊 GPT[class_explanation org.joda.time.Months H4] tokens: 444 prompt + 153 completion = 597 total
  📊 GPT[class_score org.joda.time.Days H5] tokens: 455 prompt + 3 completion = 458 total
  📊 GPT[class_explanation org.joda.time.Days H5] tokens: 434 prompt + 108 completion = 542 total
  📊 GPT[class_score org.joda.time.Months H5] tokens: 465 prompt + 3 completion = 468 total
  📊 GPT[class_explanation org.joda.time.Months H5] tokens: 444 prompt + 149 completion = 593 total
  📊 GPT[method_score org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial) H1] tokens: 669 prompt + 3 completion = 672 total
  📊 GPT[method_explanation org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial) H1] tokens: 558 prompt + 132 completion = 690 total
  📊 GPT[method_score org.joda.time.Months.getMonths() H1] tokens: 498 prompt + 3 completion = 501 total
  📊 GPT[method_explanation org.joda.time.Months.getMonths() H1] tokens: 475 prompt + 101 completion = 576 total
  📊 GPT[method_score org.joda.time.Months.months(int) H1] tokens: 501 prompt + 3 completion = 504 total
  📊 GPT[method_explanation org.joda.time.Months.months(int) H1] tokens: 477 prompt + 137 completion = 614 total
  📊 GPT[method_score org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial) H1] tokens: 673 prompt + 3 completion = 676 total
  📊 GPT[method_explanation org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial) H1] tokens: 556 prompt + 132 completion = 688 total
  📊 GPT[method_score org.joda.time.Months.getFieldType() H1] tokens: 478 prompt + 3 completion = 481 total
  📊 GPT[method_explanation org.joda.time.Months.getFieldType() H1] tokens: 455 prompt + 118 completion = 573 total
  📊 GPT[method_score org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial) H2] tokens: 661 prompt + 3 completion = 664 total
  📊 GPT[method_explanation org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial) H2] tokens: 550 prompt + 123 completion = 673 total
  📊 GPT[method_score org.joda.time.Months.getMonths() H2] tokens: 490 prompt + 3 completion = 493 total
  📊 GPT[method_explanation org.joda.time.Months.getMonths() H2] tokens: 467 prompt + 105 completion = 572 total
  📊 GPT[method_score org.joda.time.Months.months(int) H2] tokens: 493 prompt + 3 completion = 496 total
  📊 GPT[method_explanation org.joda.time.Months.months(int) H2] tokens: 469 prompt + 99 completion = 568 total
  📊 GPT[method_score org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial) H2] tokens: 665 prompt + 3 completion = 668 total
  📊 GPT[method_explanation org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial) H2] tokens: 548 prompt + 139 completion = 687 total
  📊 GPT[method_score org.joda.time.Months.getFieldType() H2] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.Months.getFieldType() H2] tokens: 447 prompt + 102 completion = 549 total
  📊 GPT[method_score org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial) H3] tokens: 661 prompt + 3 completion = 664 total
  📊 GPT[method_explanation org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial) H3] tokens: 550 prompt + 123 completion = 673 total
  📊 GPT[method_score org.joda.time.Months.getMonths() H3] tokens: 490 prompt + 3 completion = 493 total
  📊 GPT[method_explanation org.joda.time.Months.getMonths() H3] tokens: 467 prompt + 111 completion = 578 total
  📊 GPT[method_score org.joda.time.Months.months(int) H3] tokens: 493 prompt + 3 completion = 496 total
  📊 GPT[method_explanation org.joda.time.Months.months(int) H3] tokens: 469 prompt + 140 completion = 609 total
  📊 GPT[method_score org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial) H3] tokens: 665 prompt + 3 completion = 668 total
  📊 GPT[method_explanation org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial) H3] tokens: 548 prompt + 160 completion = 708 total
  📊 GPT[method_score org.joda.time.Months.getFieldType() H3] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.Months.getFieldType() H3] tokens: 447 prompt + 105 completion = 552 total
  📊 GPT[method_score org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial) H4] tokens: 661 prompt + 3 completion = 664 total
  📊 GPT[method_explanation org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial) H4] tokens: 550 prompt + 133 completion = 683 total
  📊 GPT[method_score org.joda.time.Months.getMonths() H4] tokens: 490 prompt + 3 completion = 493 total
  📊 GPT[method_explanation org.joda.time.Months.getMonths() H4] tokens: 467 prompt + 120 completion = 587 total
  📊 GPT[method_score org.joda.time.Months.months(int) H4] tokens: 493 prompt + 3 completion = 496 total
  📊 GPT[method_explanation org.joda.time.Months.months(int) H4] tokens: 469 prompt + 119 completion = 588 total
  📊 GPT[method_score org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial) H4] tokens: 665 prompt + 3 completion = 668 total
  📊 GPT[method_explanation org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial) H4] tokens: 548 prompt + 143 completion = 691 total
  📊 GPT[method_score org.joda.time.Months.getFieldType() H4] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.Months.getFieldType() H4] tokens: 447 prompt + 138 completion = 585 total
  📊 GPT[method_score org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial) H5] tokens: 661 prompt + 3 completion = 664 total
  📊 GPT[method_explanation org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial) H5] tokens: 550 prompt + 120 completion = 670 total
  📊 GPT[method_score org.joda.time.Months.getMonths() H5] tokens: 490 prompt + 3 completion = 493 total
  📊 GPT[method_explanation org.joda.time.Months.getMonths() H5] tokens: 467 prompt + 97 completion = 564 total
  📊 GPT[method_score org.joda.time.Months.months(int) H5] tokens: 493 prompt + 3 completion = 496 total
  📊 GPT[method_explanation org.joda.time.Months.months(int) H5] tokens: 469 prompt + 119 completion = 588 total
  📊 GPT[method_score org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial) H5] tokens: 665 prompt + 3 completion = 668 total
  📊 GPT[method_explanation org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial) H5] tokens: 548 prompt + 153 completion = 701 total
  📊 GPT[method_score org.joda.time.Months.getFieldType() H5] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.Months.getFieldType() H5] tokens: 447 prompt + 98 completion = 545 total

Top suspicious methods:
  1. org.joda.time.Days.daysBetween(ReadablePartial,ReadablePartial): 0.800 — best hypothesis H1: Hypothesis H1: The failure may be caused by an incorrect handling of leap years when calculating the number of days between two MonthDay instances, leading to an off-by-one error. (confidence 0.700); supporting class org.joda.time.Days (HH1)
      explanation: The method `org.joda.time.Days.daysBetween(ReadablePartial, ReadablePartial)` calculates the number of whole days between two partial datetimes. In the provided test case, the error occurs when calculating the days between `MonthDay(2, 1...
  2. org.joda.time.Months.getMonths(): 0.200 — best hypothesis H5: Hypothesis H5: The failure might be caused by an incorrect handling of leap years when calculating the number of days between two MonthDay instances. (confidence 0.700); supporting class org.joda.time.Months (HH1)
      explanation: The method `org.joda.time.Months.getMonths()` returns the number of months in a period by calling `getValue()`, which does not directly involve day calculations or leap year considerations. Since it does not interact with day-specific lo...
  3. org.joda.time.Months.monthsBetween(ReadablePartial,ReadablePartial): 0.200 — best hypothesis H1: Hypothesis H1: The failure may be caused by an incorrect handling of leap years when calculating the number of days between two MonthDay instances, leading to an off-by-one error. (confidence 0.700); supporting class org.joda.time.Months (HH1)
      explanation: The method `org.joda.time.Months.monthsBetween(ReadablePartial, ReadablePartial)` calculates the number of whole months between two partial datetimes, requiring that both partials contain the same fields. This method does not directly ha...
  4. org.joda.time.Months.months(int): 0.100 — best hypothesis H1: Hypothesis H1: The failure may be caused by an incorrect handling of leap years when calculating the number of days between two MonthDay instances, leading to an off-by-one error. (confidence 0.700); supporting class org.joda.time.Months (HH1)
      explanation: The method `org.joda.time.Months.months(int)` does not directly support or contradict Hypothesis H1, as it deals with creating or retrieving `Months` instances based on integer values and does not involve any logic related to leap year c...
  5. org.joda.time.Months.getFieldType(): 0.100 — best hypothesis H1: Hypothesis H1: The failure may be caused by an incorrect handling of leap years when calculating the number of days between two MonthDay instances, leading to an off-by-one error. (confidence 0.700); supporting class org.joda.time.Months (HH1)
      explanation: The method `org.joda.time.Months.getFieldType()` returns the `DurationFieldType` representing months and does not directly interact with day calculations or leap year logic. Therefore, it neither supports nor contradicts Hypothesis H1, a...

📊 Token Usage Summary:
  Total API calls: 87
  Total tokens: 46,640
  Prompt tokens: 41,540
  Completion tokens: 5,100
Results written to defects4j_batch_results/Time-10_parallel_case/Time-10_parallel_answer.csv
Token usage written to defects4j_batch_results/Time-10_parallel_case/Time-10_token_usage.csv
Summary written to defects4j_batch_results/Time-10_parallel_case/Time-10_parallel_summary.md
