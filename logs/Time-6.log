=== GPT-only pipeline for Time-6 ===
  📊 GPT[hypothesis H1] tokens: 77 prompt + 37 completion = 114 total
  📊 GPT[hypothesis H2] tokens: 77 prompt + 37 completion = 114 total
  📊 GPT[hypothesis H3] tokens: 77 prompt + 37 completion = 114 total
  📊 GPT[hypothesis H4] tokens: 77 prompt + 37 completion = 114 total
  📊 GPT[hypothesis H5] tokens: 77 prompt + 37 completion = 114 total
  📊 GPT[hypothesis_confidence H1] tokens: 98 prompt + 3 completion = 101 total
  📊 GPT[hypothesis_confidence H2] tokens: 98 prompt + 3 completion = 101 total
  📊 GPT[hypothesis_confidence H3] tokens: 98 prompt + 3 completion = 101 total
  📊 GPT[hypothesis_confidence H4] tokens: 98 prompt + 3 completion = 101 total
  📊 GPT[hypothesis_confidence H5] tokens: 98 prompt + 3 completion = 101 total
Hypotheses:
  H1 (confidence 0.500): Hypothesis H1: The test failure may be caused by an incorrect handling of the Julian to Gregorian calendar cutover for dates before year zero, leading to miscalculated date conversions.
  H2 (confidence 0.700): Hypothesis H2: The failure may be caused by an incorrect handling of the Gregorian-Julian calendar cutover logic for dates before year zero, leading to miscalculated date transitions.
  H3 (confidence 0.700): Hypothesis H3: The failure may be caused by an incorrect handling of the Julian to Gregorian calendar cutover logic for dates before year zero, leading to miscalculated date conversions.
  H4 (confidence 0.400): Hypothesis H4: The failure may be caused by an incorrect handling of the Gregorian-Julian calendar cutover logic for dates before year zero, leading to miscalculated date conversions.
  H5 (confidence 0.700): Hypothesis H5: The failure may be caused by an incorrect handling of the Julian to Gregorian calendar cutover logic for dates before year zero, leading to miscalculated date conversions.
Ignoring 49 covered classes without method coverage
    ▶️ GPT[class pre-ranking] running 1 prompts
  📊 GPT[class_pre_rank org.joda.time.chrono.GJChronology] tokens: 791 prompt + 55 completion = 846 total
    ✅ GPT[class pre-ranking] completed; taking top 5
Candidate classes:
  org.joda.time.chrono.GJChronology: n/a ```json
{"score": 0.9, "reason": "The failure in 'test_cutoverPreZero' suggests an issue with handling BCE dates in 'GJChronology.getInstance', indicating a likely bug in this class's date conversion logic."}
```
Collected 23 methods across candidate classes
    ▶️ GPT[method pre-ranking] running 23 prompts
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology$CutoverField.get(long)] tokens: 627 prompt + 72 completion = 699 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology$CutoverField.getDurationField()] tokens: 617 prompt + 87 completion = 704 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long)] tokens: 646 prompt + 66 completion = 712 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long)] tokens: 647 prompt + 73 completion = 720 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology$CutoverField.set(long,int)] tokens: 733 prompt + 67 completion = 800 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int)] tokens: 732 prompt + 71 completion = 803 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology$LinkedDurationField.add(long,int)] tokens: 620 prompt + 84 completion = 704 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.assemble(Fields)] tokens: 702 prompt + 70 completion = 772 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology)] tokens: 756 prompt + 70 completion = 826 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology)] tokens: 724 prompt + 65 completion = 789 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.equals(Object)] tokens: 681 prompt + 62 completion = 743 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int)] tokens: 785 prompt + 78 completion = 863 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.getGregorianCutover()] tokens: 663 prompt + 64 completion = 727 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant)] tokens: 779 prompt + 70 completion = 849 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int)] tokens: 805 prompt + 75 completion = 880 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.getInstanceUTC()] tokens: 682 prompt + 75 completion = 757 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek()] tokens: 676 prompt + 55 completion = 731 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.getZone()] tokens: 664 prompt + 59 completion = 723 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long)] tokens: 686 prompt + 74 completion = 760 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long)] tokens: 684 prompt + 73 completion = 757 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.julianToGregorianByYear(long)] tokens: 683 prompt + 71 completion = 754 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.withUTC()] tokens: 663 prompt + 71 completion = 734 total
  📊 GPT[method_pre_rank org.joda.time.chrono.GJChronology.withZone(DateTimeZone)] tokens: 682 prompt + 70 completion = 752 total
    ✅ GPT[method pre-ranking] completed
Selected 23 candidate methods
  📊 GPT[class_score org.joda.time.chrono.GJChronology H1] tokens: 513 prompt + 3 completion = 516 total
  📊 GPT[class_explanation org.joda.time.chrono.GJChronology H1] tokens: 490 prompt + 182 completion = 672 total
  📊 GPT[class_score org.joda.time.chrono.GJChronology H2] tokens: 513 prompt + 3 completion = 516 total
  📊 GPT[class_explanation org.joda.time.chrono.GJChronology H2] tokens: 490 prompt + 166 completion = 656 total
  📊 GPT[class_score org.joda.time.chrono.GJChronology H3] tokens: 513 prompt + 3 completion = 516 total
  📊 GPT[class_explanation org.joda.time.chrono.GJChronology H3] tokens: 490 prompt + 155 completion = 645 total
  📊 GPT[class_score org.joda.time.chrono.GJChronology H4] tokens: 513 prompt + 3 completion = 516 total
  📊 GPT[class_explanation org.joda.time.chrono.GJChronology H4] tokens: 490 prompt + 150 completion = 640 total
  📊 GPT[class_score org.joda.time.chrono.GJChronology H5] tokens: 513 prompt + 3 completion = 516 total
  📊 GPT[class_explanation org.joda.time.chrono.GJChronology H5] tokens: 490 prompt + 140 completion = 630 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.assemble(Fields) H1] tokens: 489 prompt + 3 completion = 492 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.assemble(Fields) H1] tokens: 464 prompt + 146 completion = 610 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int) H1] tokens: 622 prompt + 3 completion = 625 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int) H1] tokens: 506 prompt + 144 completion = 650 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant) H1] tokens: 570 prompt + 3 completion = 573 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant) H1] tokens: 530 prompt + 119 completion = 649 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology) H1] tokens: 570 prompt + 3 completion = 573 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology) H1] tokens: 473 prompt + 119 completion = 592 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H1] tokens: 515 prompt + 3 completion = 518 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H1] tokens: 469 prompt + 124 completion = 593 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getGregorianCutover() H1] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getGregorianCutover() H1] tokens: 427 prompt + 124 completion = 551 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H1] tokens: 642 prompt + 3 completion = 645 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H1] tokens: 528 prompt + 130 completion = 658 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstanceUTC() H1] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstanceUTC() H1] tokens: 446 prompt + 129 completion = 575 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long) H1] tokens: 473 prompt + 3 completion = 476 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long) H1] tokens: 448 prompt + 138 completion = 586 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long) H1] tokens: 471 prompt + 3 completion = 474 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long) H1] tokens: 446 prompt + 132 completion = 578 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int) H1] tokens: 604 prompt + 3 completion = 607 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int) H1] tokens: 508 prompt + 161 completion = 669 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.get(long) H1] tokens: 461 prompt + 3 completion = 464 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.get(long) H1] tokens: 436 prompt + 131 completion = 567 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H1] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H1] tokens: 427 prompt + 117 completion = 544 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long) H1] tokens: 479 prompt + 3 completion = 482 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long) H1] tokens: 454 prompt + 135 completion = 589 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long) H1] tokens: 482 prompt + 3 completion = 485 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long) H1] tokens: 457 prompt + 131 completion = 588 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.set(long,int) H1] tokens: 602 prompt + 3 completion = 605 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.set(long,int) H1] tokens: 512 prompt + 172 completion = 684 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$LinkedDurationField.add(long,int) H1] tokens: 454 prompt + 3 completion = 457 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$LinkedDurationField.add(long,int) H1] tokens: 429 prompt + 145 completion = 574 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H1] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H1] tokens: 445 prompt + 146 completion = 591 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.equals(Object) H1] tokens: 469 prompt + 3 completion = 472 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.equals(Object) H1] tokens: 444 prompt + 137 completion = 581 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek() H1] tokens: 464 prompt + 3 completion = 467 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek() H1] tokens: 440 prompt + 131 completion = 571 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getZone() H1] tokens: 452 prompt + 3 completion = 455 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getZone() H1] tokens: 428 prompt + 146 completion = 574 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.withUTC() H1] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.withUTC() H1] tokens: 427 prompt + 123 completion = 550 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.withZone(DateTimeZone) H1] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.withZone(DateTimeZone) H1] tokens: 445 prompt + 148 completion = 593 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.assemble(Fields) H2] tokens: 489 prompt + 3 completion = 492 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.assemble(Fields) H2] tokens: 464 prompt + 153 completion = 617 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int) H2] tokens: 622 prompt + 3 completion = 625 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int) H2] tokens: 506 prompt + 157 completion = 663 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant) H2] tokens: 570 prompt + 3 completion = 573 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant) H2] tokens: 530 prompt + 140 completion = 670 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology) H2] tokens: 570 prompt + 3 completion = 573 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology) H2] tokens: 473 prompt + 131 completion = 604 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H2] tokens: 515 prompt + 3 completion = 518 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H2] tokens: 469 prompt + 139 completion = 608 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getGregorianCutover() H2] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getGregorianCutover() H2] tokens: 427 prompt + 120 completion = 547 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H2] tokens: 642 prompt + 3 completion = 645 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H2] tokens: 528 prompt + 128 completion = 656 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstanceUTC() H2] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstanceUTC() H2] tokens: 446 prompt + 135 completion = 581 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long) H2] tokens: 473 prompt + 3 completion = 476 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long) H2] tokens: 448 prompt + 136 completion = 584 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long) H2] tokens: 471 prompt + 3 completion = 474 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long) H2] tokens: 446 prompt + 126 completion = 572 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int) H2] tokens: 604 prompt + 3 completion = 607 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int) H2] tokens: 508 prompt + 132 completion = 640 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.get(long) H2] tokens: 461 prompt + 3 completion = 464 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.get(long) H2] tokens: 436 prompt + 110 completion = 546 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H2] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H2] tokens: 427 prompt + 115 completion = 542 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long) H2] tokens: 479 prompt + 3 completion = 482 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long) H2] tokens: 454 prompt + 134 completion = 588 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long) H2] tokens: 482 prompt + 3 completion = 485 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long) H2] tokens: 457 prompt + 130 completion = 587 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.set(long,int) H2] tokens: 602 prompt + 3 completion = 605 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.set(long,int) H2] tokens: 512 prompt + 136 completion = 648 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$LinkedDurationField.add(long,int) H2] tokens: 454 prompt + 3 completion = 457 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$LinkedDurationField.add(long,int) H2] tokens: 429 prompt + 145 completion = 574 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H2] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H2] tokens: 445 prompt + 117 completion = 562 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.equals(Object) H2] tokens: 469 prompt + 3 completion = 472 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.equals(Object) H2] tokens: 444 prompt + 118 completion = 562 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek() H2] tokens: 464 prompt + 3 completion = 467 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek() H2] tokens: 440 prompt + 114 completion = 554 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getZone() H2] tokens: 452 prompt + 3 completion = 455 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getZone() H2] tokens: 428 prompt + 134 completion = 562 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.withUTC() H2] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.withUTC() H2] tokens: 427 prompt + 126 completion = 553 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.withZone(DateTimeZone) H2] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.withZone(DateTimeZone) H2] tokens: 445 prompt + 132 completion = 577 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.assemble(Fields) H3] tokens: 489 prompt + 3 completion = 492 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.assemble(Fields) H3] tokens: 464 prompt + 154 completion = 618 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int) H3] tokens: 622 prompt + 3 completion = 625 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int) H3] tokens: 506 prompt + 134 completion = 640 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant) H3] tokens: 570 prompt + 3 completion = 573 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant) H3] tokens: 530 prompt + 131 completion = 661 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology) H3] tokens: 570 prompt + 3 completion = 573 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology) H3] tokens: 473 prompt + 146 completion = 619 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H3] tokens: 515 prompt + 3 completion = 518 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H3] tokens: 469 prompt + 138 completion = 607 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getGregorianCutover() H3] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getGregorianCutover() H3] tokens: 427 prompt + 126 completion = 553 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H3] tokens: 642 prompt + 3 completion = 645 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H3] tokens: 528 prompt + 134 completion = 662 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstanceUTC() H3] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstanceUTC() H3] tokens: 446 prompt + 133 completion = 579 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long) H3] tokens: 473 prompt + 3 completion = 476 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long) H3] tokens: 448 prompt + 132 completion = 580 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long) H3] tokens: 471 prompt + 3 completion = 474 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long) H3] tokens: 446 prompt + 123 completion = 569 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int) H3] tokens: 604 prompt + 3 completion = 607 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int) H3] tokens: 508 prompt + 145 completion = 653 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.get(long) H3] tokens: 461 prompt + 3 completion = 464 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.get(long) H3] tokens: 436 prompt + 133 completion = 569 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H3] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H3] tokens: 427 prompt + 117 completion = 544 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long) H3] tokens: 479 prompt + 3 completion = 482 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long) H3] tokens: 454 prompt + 150 completion = 604 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long) H3] tokens: 482 prompt + 3 completion = 485 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long) H3] tokens: 457 prompt + 135 completion = 592 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.set(long,int) H3] tokens: 602 prompt + 3 completion = 605 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.set(long,int) H3] tokens: 512 prompt + 148 completion = 660 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$LinkedDurationField.add(long,int) H3] tokens: 454 prompt + 3 completion = 457 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$LinkedDurationField.add(long,int) H3] tokens: 429 prompt + 141 completion = 570 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H3] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H3] tokens: 445 prompt + 130 completion = 575 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.equals(Object) H3] tokens: 469 prompt + 3 completion = 472 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.equals(Object) H3] tokens: 444 prompt + 131 completion = 575 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek() H3] tokens: 464 prompt + 3 completion = 467 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek() H3] tokens: 440 prompt + 115 completion = 555 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getZone() H3] tokens: 452 prompt + 3 completion = 455 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getZone() H3] tokens: 428 prompt + 129 completion = 557 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.withUTC() H3] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.withUTC() H3] tokens: 427 prompt + 102 completion = 529 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.withZone(DateTimeZone) H3] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.withZone(DateTimeZone) H3] tokens: 445 prompt + 131 completion = 576 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.assemble(Fields) H4] tokens: 489 prompt + 3 completion = 492 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.assemble(Fields) H4] tokens: 464 prompt + 156 completion = 620 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int) H4] tokens: 622 prompt + 3 completion = 625 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int) H4] tokens: 506 prompt + 134 completion = 640 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant) H4] tokens: 570 prompt + 3 completion = 573 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant) H4] tokens: 530 prompt + 124 completion = 654 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology) H4] tokens: 570 prompt + 3 completion = 573 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology) H4] tokens: 473 prompt + 130 completion = 603 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H4] tokens: 515 prompt + 3 completion = 518 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H4] tokens: 469 prompt + 149 completion = 618 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getGregorianCutover() H4] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getGregorianCutover() H4] tokens: 427 prompt + 149 completion = 576 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H4] tokens: 642 prompt + 3 completion = 645 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H4] tokens: 528 prompt + 120 completion = 648 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstanceUTC() H4] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstanceUTC() H4] tokens: 446 prompt + 116 completion = 562 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long) H4] tokens: 473 prompt + 3 completion = 476 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long) H4] tokens: 448 prompt + 136 completion = 584 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long) H4] tokens: 471 prompt + 3 completion = 474 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long) H4] tokens: 446 prompt + 136 completion = 582 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int) H4] tokens: 604 prompt + 3 completion = 607 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int) H4] tokens: 508 prompt + 184 completion = 692 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.get(long) H4] tokens: 461 prompt + 3 completion = 464 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.get(long) H4] tokens: 436 prompt + 125 completion = 561 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H4] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H4] tokens: 427 prompt + 117 completion = 544 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long) H4] tokens: 479 prompt + 3 completion = 482 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long) H4] tokens: 454 prompt + 135 completion = 589 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long) H4] tokens: 482 prompt + 3 completion = 485 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long) H4] tokens: 457 prompt + 141 completion = 598 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.set(long,int) H4] tokens: 602 prompt + 3 completion = 605 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.set(long,int) H4] tokens: 512 prompt + 140 completion = 652 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$LinkedDurationField.add(long,int) H4] tokens: 454 prompt + 3 completion = 457 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$LinkedDurationField.add(long,int) H4] tokens: 429 prompt + 136 completion = 565 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H4] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H4] tokens: 445 prompt + 144 completion = 589 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.equals(Object) H4] tokens: 469 prompt + 3 completion = 472 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.equals(Object) H4] tokens: 444 prompt + 109 completion = 553 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek() H4] tokens: 464 prompt + 3 completion = 467 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek() H4] tokens: 440 prompt + 117 completion = 557 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getZone() H4] tokens: 452 prompt + 3 completion = 455 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getZone() H4] tokens: 428 prompt + 130 completion = 558 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.withUTC() H4] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.withUTC() H4] tokens: 427 prompt + 130 completion = 557 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.withZone(DateTimeZone) H4] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.withZone(DateTimeZone) H4] tokens: 445 prompt + 134 completion = 579 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.assemble(Fields) H5] tokens: 489 prompt + 3 completion = 492 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.assemble(Fields) H5] tokens: 464 prompt + 145 completion = 609 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int) H5] tokens: 622 prompt + 3 completion = 625 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int) H5] tokens: 506 prompt + 142 completion = 648 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant) H5] tokens: 570 prompt + 3 completion = 573 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant) H5] tokens: 530 prompt + 129 completion = 659 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology) H5] tokens: 570 prompt + 3 completion = 573 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology) H5] tokens: 473 prompt + 117 completion = 590 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H5] tokens: 515 prompt + 3 completion = 518 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology) H5] tokens: 469 prompt + 135 completion = 604 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getGregorianCutover() H5] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getGregorianCutover() H5] tokens: 427 prompt + 115 completion = 542 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H5] tokens: 642 prompt + 3 completion = 645 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int) H5] tokens: 528 prompt + 134 completion = 662 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getInstanceUTC() H5] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getInstanceUTC() H5] tokens: 446 prompt + 115 completion = 561 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long) H5] tokens: 473 prompt + 3 completion = 476 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long) H5] tokens: 448 prompt + 118 completion = 566 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long) H5] tokens: 471 prompt + 3 completion = 474 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long) H5] tokens: 446 prompt + 133 completion = 579 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int) H5] tokens: 604 prompt + 3 completion = 607 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int) H5] tokens: 508 prompt + 168 completion = 676 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.get(long) H5] tokens: 461 prompt + 3 completion = 464 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.get(long) H5] tokens: 436 prompt + 146 completion = 582 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H5] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.getDurationField() H5] tokens: 427 prompt + 140 completion = 567 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long) H5] tokens: 479 prompt + 3 completion = 482 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long) H5] tokens: 454 prompt + 167 completion = 621 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long) H5] tokens: 482 prompt + 3 completion = 485 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long) H5] tokens: 457 prompt + 151 completion = 608 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$CutoverField.set(long,int) H5] tokens: 602 prompt + 3 completion = 605 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$CutoverField.set(long,int) H5] tokens: 512 prompt + 134 completion = 646 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology$LinkedDurationField.add(long,int) H5] tokens: 454 prompt + 3 completion = 457 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology$LinkedDurationField.add(long,int) H5] tokens: 429 prompt + 127 completion = 556 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H5] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.julianToGregorianByYear(long) H5] tokens: 445 prompt + 139 completion = 584 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.equals(Object) H5] tokens: 469 prompt + 3 completion = 472 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.equals(Object) H5] tokens: 444 prompt + 144 completion = 588 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek() H5] tokens: 464 prompt + 3 completion = 467 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek() H5] tokens: 440 prompt + 126 completion = 566 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.getZone() H5] tokens: 452 prompt + 3 completion = 455 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.getZone() H5] tokens: 428 prompt + 131 completion = 559 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.withUTC() H5] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.withUTC() H5] tokens: 427 prompt + 102 completion = 529 total
  📊 GPT[method_score org.joda.time.chrono.GJChronology.withZone(DateTimeZone) H5] tokens: 470 prompt + 3 completion = 473 total
  📊 GPT[method_explanation org.joda.time.chrono.GJChronology.withZone(DateTimeZone) H5] tokens: 445 prompt + 144 completion = 589 total
  🔀 Tie-breaking 16 methods with score 0.800000
  📊 GPT[method_tie_break] tokens: 5283 prompt + 137 completion = 5420 total
  🔍 Raw tie-breaking response: ```json
[
  {"method": "org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant)", "tie_break_score": 0.95},
  {"method": "org.joda.time.chrono.GJChronology.assemble(Fields)", "tie_break_score": 0.82},
  {"method": "org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int)", "tie_break_score": 0.65},
  {"method": "org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology)", "tie_break_score": 0.43}
]
```
    ❌ JSON parse attempt 1 failed: Expecting value: line 1 column 1 (char 0)
    ✅ Successfully parsed JSON attempt 2
    🔍 Parsed object type: <class 'list'>
    🔍 Parsed object content: [{'method': 'org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant)', 'tie_break_score': 0.95}, {'method': 'org.joda.time.chrono.GJChronology.assemble(Fields)', 'tie_break_score': 0.82}, {'method': 'org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int)', 'tie_break_score': 0.65}, {'method': 'org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology)', 'tie_break_score': 0.43}]
    🔍 Processing method: org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant), value: 0.95 (type: <class 'float'>)
    🔍 Coerced to: 0.95
    📝 Recorded org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant): 0.95 -> 0.95
    🔍 Processing method: org.joda.time.chrono.GJChronology.assemble(Fields), value: 0.82 (type: <class 'float'>)
    🔍 Coerced to: 0.82
    📝 Recorded org.joda.time.chrono.GJChronology.assemble(Fields): 0.82 -> 0.82
    🔍 Processing method: org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int), value: 0.65 (type: <class 'float'>)
    🔍 Coerced to: 0.65
    📝 Recorded org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int): 0.65 -> 0.65
    🔍 Processing method: org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology), value: 0.43 (type: <class 'float'>)
    🔍 Coerced to: 0.43
    📝 Recorded org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology): 0.43 -> 0.43
  📊 Parsed tie-breaking scores: {'org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant)': 1.0, 'org.joda.time.chrono.GJChronology.assemble(Fields)': 0.8631578947368421, 'org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int)': 0.6842105263157895, 'org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology)': 0.45263157894736844}
  🎯 Tie-breaking scores: {'org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant)': 1.0, 'org.joda.time.chrono.GJChronology.assemble(Fields)': 0.8631578947368421, 'org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int)': 0.6842105263157895, 'org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology)': 0.45263157894736844}
    org.joda.time.chrono.GJChronology.assemble(Fields): 0.800000 + 0.008632 = 0.808632
    org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int): 0.800000 + 0.006842 = 0.806842
    org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant): 0.800000 + 0.010000 = 0.810000
    org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology): 0.800000 + 0.004526 = 0.804526
  ✅ Final ranking after tie-breaking:
    1. org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant): 0.810000
    2. org.joda.time.chrono.GJChronology.assemble(Fields): 0.808632
    3. org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int): 0.806842
    4. org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology): 0.804526
    5. org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology): 0.800000
    6. org.joda.time.chrono.GJChronology.getGregorianCutover(): 0.800000
    7. org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int): 0.800000
    8. org.joda.time.chrono.GJChronology.getInstanceUTC(): 0.800000
    9. org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long): 0.800000
    10. org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long): 0.800000
    11. org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long,int): 0.800000
    12. org.joda.time.chrono.GJChronology$CutoverField.get(long): 0.800000
    13. org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(long): 0.800000
    14. org.joda.time.chrono.GJChronology$CutoverField.roundFloor(long): 0.800000
    15. org.joda.time.chrono.GJChronology$CutoverField.set(long,int): 0.800000
    16. org.joda.time.chrono.GJChronology.julianToGregorianByYear(long): 0.800000

Top suspicious methods:
  1. org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant): 0.810 — best hypothesis H1: Hypothesis H1: The test failure may be caused by an incorrect handling of the Julian to Gregorian calendar cutover for dates before year zero, leading to miscalculated date conversions. (confidence 0.500); supporting class org.joda.time.chrono.GJChronology (HH1)
      explanation: The method `GJChronology.getInstance(DateTimeZone, ReadableInstant)` supports hypothesis H1 as it allows specifying any cutover date, including those before year zero, which could lead to incorrect handling of the Julian to Gregorian cal...
  2. org.joda.time.chrono.GJChronology.assemble(Fields): 0.809 — best hypothesis H1: Hypothesis H1: The test failure may be caused by an incorrect handling of the Julian to Gregorian calendar cutover for dates before year zero, leading to miscalculated date conversions. (confidence 0.500); supporting class org.joda.time.chrono.GJChronology (HH1)
      explanation: The method `org.joda.time.chrono.GJChronology.assemble(Fields)` supports Hypothesis H1 as it is responsible for setting up the cutover logic between the Julian and Gregorian calendars. The failure in the test `test_cutoverPreZero` sugges...
  3. org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int): 0.807 — best hypothesis H1: Hypothesis H1: The test failure may be caused by an incorrect handling of the Julian to Gregorian calendar cutover for dates before year zero, leading to miscalculated date conversions. (confidence 0.500); supporting class org.joda.time.chrono.GJChronology (HH1)
      explanation: The method `org.joda.time.chrono.GJChronology.getDateTimeMillis(int, int, int, int)` supports Hypothesis H1 because it handles date conversions around the Julian to Gregorian cutover. The method defaults to using the Gregorian chronology...
  4. org.joda.time.chrono.GJChronology.convertByWeekyear(long,Chronology,Chronology): 0.805 — best hypothesis H4: Hypothesis H4: The failure may be caused by an incorrect handling of the Gregorian-Julian calendar cutover logic for dates before year zero, leading to miscalculated date conversions. (confidence 0.400); supporting class org.joda.time.chrono.GJChronology (HH1)
      explanation: The method `convertByWeekyear` in `GJChronology` is responsible for converting a datetime from one chronology to another by setting the weekyear in the target chronology based on the weekyear from the source chronology. In the context of...
  5. org.joda.time.chrono.GJChronology.convertByYear(long,Chronology,Chronology): 0.800 — best hypothesis H3: Hypothesis H3: The failure may be caused by an incorrect handling of the Julian to Gregorian calendar cutover logic for dates before year zero, leading to miscalculated date conversions. (confidence 0.700); supporting class org.joda.time.chrono.GJChronology (HH1)
      explanation: The method `org.joda.time.chrono.GJChronology.convertByYear(long, Chronology, Chronology)` supports Hypothesis H3 as it is responsible for converting dates between different chronologies, which includes handling the Julian to Gregorian c...
  6. org.joda.time.chrono.GJChronology.getGregorianCutover(): 0.800 — best hypothesis H2: Hypothesis H2: The failure may be caused by an incorrect handling of the Gregorian-Julian calendar cutover logic for dates before year zero, leading to miscalculated date transitions. (confidence 0.700); supporting class org.joda.time.chrono.GJChronology (HH1)
      explanation: The method `org.joda.time.chrono.GJChronology.getGregorianCutover()` returns the cutover instant, which is crucial for determining the transition point between the Julian and Gregorian calendars. In the failure context, the test `test_cu...
  7. org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int): 0.800 — best hypothesis H1: Hypothesis H1: The test failure may be caused by an incorrect handling of the Julian to Gregorian calendar cutover for dates before year zero, leading to miscalculated date conversions. (confidence 0.500); supporting class org.joda.time.chrono.GJChronology (HH1)
      explanation: The method `GJChronology.getInstance(DateTimeZone, ReadableInstant, int)` supports hypothesis H1 because it allows specifying a custom cutover date, which is crucial for handling the transition from the Julian to the Gregorian calendar. ...
  8. org.joda.time.chrono.GJChronology.getInstanceUTC(): 0.800 — best hypothesis H1: Hypothesis H1: The test failure may be caused by an incorrect handling of the Julian to Gregorian calendar cutover for dates before year zero, leading to miscalculated date conversions. (confidence 0.500); supporting class org.joda.time.chrono.GJChronology (HH1)
      explanation: The method `org.joda.time.chrono.GJChronology.getInstanceUTC()` supports Hypothesis H1 as it involves handling the Julian to Gregorian calendar cutover, which is crucial for dates around year zero. The test failure occurs when attempting...
  9. org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(long): 0.800 — best hypothesis H3: Hypothesis H3: The failure may be caused by an incorrect handling of the Julian to Gregorian calendar cutover logic for dates before year zero, leading to miscalculated date conversions. (confidence 0.700); supporting class org.joda.time.chrono.GJChronology (HH1)
      explanation: The method `gregorianToJulianByWeekyear(long)` supports Hypothesis H3 as it directly involves converting dates between the Gregorian and Julian calendars, which is central to handling the cutover logic. The failure in `test_cutoverPreZer...
  10. org.joda.time.chrono.GJChronology.gregorianToJulianByYear(long): 0.800 — best hypothesis H1: Hypothesis H1: The test failure may be caused by an incorrect handling of the Julian to Gregorian calendar cutover for dates before year zero, leading to miscalculated date conversions. (confidence 0.500); supporting class org.joda.time.chrono.GJChronology (HH1)
      explanation: The method `gregorianToJulianByYear(long)` supports hypothesis H1 as it directly deals with converting dates between the Gregorian and Julian calendars. The failure in the test `test_cutoverPreZero` suggests an issue with handling dates ...

📊 Token Usage Summary:
  Total API calls: 275
  Total tokens: 157,311
  Prompt tokens: 138,756
  Completion tokens: 18,555
Results written to defects4j_batch_results/Time-6_parallel_case/Time-6_parallel_answer.csv
Token usage written to defects4j_batch_results/Time-6_parallel_case/Time-6_token_usage.csv
Summary written to defects4j_batch_results/Time-6_parallel_case/Time-6_parallel_summary.md
