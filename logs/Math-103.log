=== GPT-only pipeline for Math-103 ===
  📊 GPT[hypothesis H1] tokens: 75 prompt + 40 completion = 115 total
  📊 GPT[hypothesis H2] tokens: 75 prompt + 29 completion = 104 total
  📊 GPT[hypothesis H3] tokens: 75 prompt + 47 completion = 122 total
  📊 GPT[hypothesis H4] tokens: 75 prompt + 29 completion = 104 total
  📊 GPT[hypothesis H5] tokens: 75 prompt + 29 completion = 104 total
  📊 GPT[hypothesis_confidence H1] tokens: 101 prompt + 3 completion = 104 total
  📊 GPT[hypothesis_confidence H2] tokens: 90 prompt + 3 completion = 93 total
  📊 GPT[hypothesis_confidence H3] tokens: 108 prompt + 3 completion = 111 total
  📊 GPT[hypothesis_confidence H4] tokens: 90 prompt + 3 completion = 93 total
  📊 GPT[hypothesis_confidence H5] tokens: 90 prompt + 3 completion = 93 total
Hypotheses:
  H1 (confidence 0.700): H1: The failure in "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues" may be caused by numerical instability or precision loss when handling extreme values in the normal distribution calculations.
  H2 (confidence 0.700): Hypothesis H2: The failure may be caused by incorrect handling of floating-point precision limits when calculating probabilities for extreme values in the normal distribution.
  H3 (confidence 0.700): Hypothesis H3: The failure in "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues" may be caused by numerical instability or precision loss when handling very large or very small input values in the normal distribution calculations.
  H4 (confidence 0.700): Hypothesis H4: The failure may be caused by incorrect handling of floating-point precision limits when computing probabilities for extreme values in the normal distribution.
  H5 (confidence 0.700): Hypothesis H5: The failure may be caused by incorrect handling of floating-point precision limits when calculating probabilities for extreme values in the normal distribution.
Ignoring 7 covered classes without method coverage
    ▶️ GPT[class pre-ranking] running 1 prompts
  📊 GPT[class_pre_rank org.apache.commons.math.distribution.NormalDistributionImpl] tokens: 608 prompt + 52 completion = 660 total
    ✅ GPT[class pre-ranking] completed; taking top 5
Candidate classes:
  org.apache.commons.math.distribution.NormalDistributionImpl: n/a ```json
{"score": 0.9, "reason": "The failure occurs in the cumulativeProbability method of NormalDistributionImpl, which directly handles extreme values and calls the regularizedGammaP function, leading to the MaxIterationsExceededException."}
```
Collected 4 methods across candidate classes
    ▶️ GPT[method pre-ranking] running 4 prompts
  📊 GPT[method_pre_rank org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)] tokens: 597 prompt + 64 completion = 661 total
  📊 GPT[method_pre_rank org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double)] tokens: 698 prompt + 88 completion = 786 total
  📊 GPT[method_pre_rank org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double)] tokens: 593 prompt + 62 completion = 655 total
  📊 GPT[method_pre_rank org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double)] tokens: 603 prompt + 54 completion = 657 total
    ✅ GPT[method pre-ranking] completed
Selected 4 candidate methods
  📊 GPT[class_score org.apache.commons.math.distribution.NormalDistributionImpl H1] tokens: 426 prompt + 3 completion = 429 total
  📊 GPT[class_explanation org.apache.commons.math.distribution.NormalDistributionImpl H1] tokens: 406 prompt + 111 completion = 517 total
  📊 GPT[class_score org.apache.commons.math.distribution.NormalDistributionImpl H2] tokens: 415 prompt + 3 completion = 418 total
  📊 GPT[class_explanation org.apache.commons.math.distribution.NormalDistributionImpl H2] tokens: 395 prompt + 124 completion = 519 total
  📊 GPT[class_score org.apache.commons.math.distribution.NormalDistributionImpl H3] tokens: 433 prompt + 3 completion = 436 total
  📊 GPT[class_explanation org.apache.commons.math.distribution.NormalDistributionImpl H3] tokens: 413 prompt + 121 completion = 534 total
  📊 GPT[class_score org.apache.commons.math.distribution.NormalDistributionImpl H4] tokens: 415 prompt + 3 completion = 418 total
  📊 GPT[class_explanation org.apache.commons.math.distribution.NormalDistributionImpl H4] tokens: 395 prompt + 104 completion = 499 total
  📊 GPT[class_score org.apache.commons.math.distribution.NormalDistributionImpl H5] tokens: 415 prompt + 3 completion = 418 total
  📊 GPT[class_explanation org.apache.commons.math.distribution.NormalDistributionImpl H5] tokens: 395 prompt + 118 completion = 513 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H1] tokens: 551 prompt + 3 completion = 554 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H1] tokens: 519 prompt + 120 completion = 639 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H1] tokens: 447 prompt + 3 completion = 450 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H1] tokens: 423 prompt + 104 completion = 527 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double) H1] tokens: 443 prompt + 3 completion = 446 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double) H1] tokens: 419 prompt + 113 completion = 532 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double) H1] tokens: 453 prompt + 3 completion = 456 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double) H1] tokens: 429 prompt + 106 completion = 535 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H2] tokens: 540 prompt + 3 completion = 543 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H2] tokens: 508 prompt + 117 completion = 625 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H2] tokens: 436 prompt + 3 completion = 439 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H2] tokens: 412 prompt + 112 completion = 524 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double) H2] tokens: 432 prompt + 3 completion = 435 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double) H2] tokens: 408 prompt + 108 completion = 516 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double) H2] tokens: 442 prompt + 3 completion = 445 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double) H2] tokens: 418 prompt + 106 completion = 524 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H3] tokens: 558 prompt + 3 completion = 561 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H3] tokens: 526 prompt + 133 completion = 659 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H3] tokens: 454 prompt + 3 completion = 457 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H3] tokens: 430 prompt + 125 completion = 555 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double) H3] tokens: 450 prompt + 3 completion = 453 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double) H3] tokens: 426 prompt + 100 completion = 526 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double) H3] tokens: 460 prompt + 3 completion = 463 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double) H3] tokens: 436 prompt + 103 completion = 539 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H4] tokens: 540 prompt + 3 completion = 543 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H4] tokens: 508 prompt + 130 completion = 638 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H4] tokens: 436 prompt + 3 completion = 439 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H4] tokens: 412 prompt + 133 completion = 545 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double) H4] tokens: 432 prompt + 3 completion = 435 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double) H4] tokens: 408 prompt + 96 completion = 504 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double) H4] tokens: 442 prompt + 3 completion = 445 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double) H4] tokens: 418 prompt + 100 completion = 518 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H5] tokens: 540 prompt + 3 completion = 543 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H5] tokens: 508 prompt + 114 completion = 622 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H5] tokens: 436 prompt + 3 completion = 439 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H5] tokens: 412 prompt + 127 completion = 539 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double) H5] tokens: 432 prompt + 3 completion = 435 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double) H5] tokens: 408 prompt + 100 completion = 508 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double) H5] tokens: 442 prompt + 3 completion = 445 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double) H5] tokens: 418 prompt + 109 completion = 527 total

Top suspicious methods:
  1. org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double): 0.800 — best hypothesis H1: H1: The failure in "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues" may be caused by numerical instability or precision loss when handling extreme values in the normal distribution calculations. (confidence 0.700); supporting class org.apache.commons.math.distribution.NormalDistributionImpl (HH1)
      explanation: The method `cumulativeProbability(double x)` in `NormalDistributionImpl` calculates the cumulative distribution function (CDF) using the error function `Erf.erf`, which in turn relies on the `Gamma.regularizedGammaP` method. The failure ...
  2. org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double): 0.300 — best hypothesis H1: H1: The failure in "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues" may be caused by numerical instability or precision loss when handling extreme values in the normal distribution calculations. (confidence 0.700); supporting class org.apache.commons.math.distribution.NormalDistributionImpl (HH1)
      explanation: The method `NormalDistributionImpl.NormalDistributionImpl(double, double)` initializes the normal distribution with specified mean and standard deviation by invoking `setMean(double)` and `setStandardDeviation(double)`. This supports hyp...
  3. org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(double): 0.200 — best hypothesis H4: Hypothesis H4: The failure may be caused by incorrect handling of floating-point precision limits when computing probabilities for extreme values in the normal distribution. (confidence 0.700); supporting class org.apache.commons.math.distribution.NormalDistributionImpl (HH1)
      explanation: The method `setStandardDeviation(double)` supports Hypothesis H4 indirectly by ensuring that the standard deviation is positive, which is crucial for the correct computation of probabilities in a normal distribution. However, it does not...
  4. org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double): 0.100 — best hypothesis H1: H1: The failure in "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues" may be caused by numerical instability or precision loss when handling extreme values in the normal distribution calculations. (confidence 0.700); supporting class org.apache.commons.math.distribution.NormalDistributionImpl (HH1)
      explanation: The method `org.apache.commons.math.distribution.NormalDistributionImpl.setMean(double)` simply assigns the provided mean value to an internal field without performing any calculations or calling other methods. Therefore, it neither supp...

📊 Token Usage Summary:
  Total API calls: 65
  Total tokens: 29,691
  Prompt tokens: 26,273
  Completion tokens: 3,418
Results written to defects4j_batch_results/Math-103_parallel_case/Math-103_parallel_answer.csv
Token usage written to defects4j_batch_results/Math-103_parallel_case/Math-103_token_usage.csv
Summary written to defects4j_batch_results/Math-103_parallel_case/Math-103_parallel_summary.md
