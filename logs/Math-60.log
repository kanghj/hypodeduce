=== GPT-only pipeline for Math-60 ===
  📊 GPT[hypothesis H1] tokens: 75 prompt + 41 completion = 116 total
  📊 GPT[hypothesis H2] tokens: 75 prompt + 29 completion = 104 total
  📊 GPT[hypothesis H3] tokens: 75 prompt + 30 completion = 105 total
  📊 GPT[hypothesis H4] tokens: 75 prompt + 48 completion = 123 total
  📊 GPT[hypothesis H5] tokens: 75 prompt + 30 completion = 105 total
  📊 GPT[hypothesis_confidence H1] tokens: 102 prompt + 3 completion = 105 total
  📊 GPT[hypothesis_confidence H2] tokens: 90 prompt + 3 completion = 93 total
  📊 GPT[hypothesis_confidence H3] tokens: 91 prompt + 3 completion = 94 total
  📊 GPT[hypothesis_confidence H4] tokens: 109 prompt + 3 completion = 112 total
  📊 GPT[hypothesis_confidence H5] tokens: 91 prompt + 3 completion = 94 total
Hypotheses:
  H1 (confidence 0.800): H1: The failure in "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues" may be caused by numerical instability or precision loss when handling very large or very small floating-point numbers.
  H2 (confidence 0.700): Hypothesis H2: The failure may be caused by incorrect handling of floating-point precision limits when computing probabilities for extreme values in the normal distribution.
  H3 (confidence 0.700): Hypothesis H3: The failure may be caused by an incorrect handling of floating-point precision limits when dealing with extreme values in the normal distribution calculations.
  H4 (confidence 0.800): Hypothesis H4: The failure in "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues" could be due to numerical instability or precision loss when handling very large or very small floating-point numbers in the normal distribution calculations.
  H5 (confidence 0.700): Hypothesis H5: The failure may be caused by an incorrect handling of floating-point precision limits when dealing with extreme values in the NormalDistribution implementation.
Ignoring 10 covered classes without method coverage
    ▶️ GPT[class pre-ranking] running 1 prompts
  📊 GPT[class_pre_rank org.apache.commons.math.distribution.NormalDistributionImpl] tokens: 644 prompt + 55 completion = 699 total
    ✅ GPT[class pre-ranking] completed; taking top 5
Candidate classes:
  org.apache.commons.math.distribution.NormalDistributionImpl: n/a ```json
{"score": 0.9, "reason": "The failure occurs in the cumulativeProbability method of NormalDistributionImpl, as indicated by the stack trace and test code. This suggests the class is highly likely the best location to address the bug."}
```
Collected 3 methods across candidate classes
    ▶️ GPT[method pre-ranking] running 3 prompts
  📊 GPT[method_pre_rank org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double)] tokens: 655 prompt + 58 completion = 713 total
  📊 GPT[method_pre_rank org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double)] tokens: 652 prompt + 60 completion = 712 total
  📊 GPT[method_pre_rank org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double)] tokens: 801 prompt + 92 completion = 893 total
    ✅ GPT[method pre-ranking] completed
Selected 3 candidate methods
  📊 GPT[class_score org.apache.commons.math.distribution.NormalDistributionImpl H1] tokens: 451 prompt + 3 completion = 454 total
  📊 GPT[class_explanation org.apache.commons.math.distribution.NormalDistributionImpl H1] tokens: 431 prompt + 108 completion = 539 total
  📊 GPT[class_score org.apache.commons.math.distribution.NormalDistributionImpl H2] tokens: 439 prompt + 3 completion = 442 total
  📊 GPT[class_explanation org.apache.commons.math.distribution.NormalDistributionImpl H2] tokens: 419 prompt + 109 completion = 528 total
  📊 GPT[class_score org.apache.commons.math.distribution.NormalDistributionImpl H3] tokens: 440 prompt + 3 completion = 443 total
  📊 GPT[class_explanation org.apache.commons.math.distribution.NormalDistributionImpl H3] tokens: 420 prompt + 139 completion = 559 total
  📊 GPT[class_score org.apache.commons.math.distribution.NormalDistributionImpl H4] tokens: 458 prompt + 3 completion = 461 total
  📊 GPT[class_explanation org.apache.commons.math.distribution.NormalDistributionImpl H4] tokens: 438 prompt + 127 completion = 565 total
  📊 GPT[class_score org.apache.commons.math.distribution.NormalDistributionImpl H5] tokens: 440 prompt + 3 completion = 443 total
  📊 GPT[class_explanation org.apache.commons.math.distribution.NormalDistributionImpl H5] tokens: 420 prompt + 128 completion = 548 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H1] tokens: 492 prompt + 3 completion = 495 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H1] tokens: 468 prompt + 118 completion = 586 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double) H1] tokens: 489 prompt + 3 completion = 492 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double) H1] tokens: 465 prompt + 146 completion = 611 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H1] tokens: 675 prompt + 3 completion = 678 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H1] tokens: 553 prompt + 133 completion = 686 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H2] tokens: 480 prompt + 3 completion = 483 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H2] tokens: 456 prompt + 137 completion = 593 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double) H2] tokens: 477 prompt + 3 completion = 480 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double) H2] tokens: 453 prompt + 110 completion = 563 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H2] tokens: 663 prompt + 3 completion = 666 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H2] tokens: 541 prompt + 138 completion = 679 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H3] tokens: 481 prompt + 3 completion = 484 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H3] tokens: 457 prompt + 102 completion = 559 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double) H3] tokens: 478 prompt + 3 completion = 481 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double) H3] tokens: 454 prompt + 126 completion = 580 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H3] tokens: 664 prompt + 3 completion = 667 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H3] tokens: 542 prompt + 126 completion = 668 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H4] tokens: 499 prompt + 3 completion = 502 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H4] tokens: 475 prompt + 115 completion = 590 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double) H4] tokens: 496 prompt + 3 completion = 499 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double) H4] tokens: 472 prompt + 115 completion = 587 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H4] tokens: 682 prompt + 3 completion = 685 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H4] tokens: 560 prompt + 131 completion = 691 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H5] tokens: 481 prompt + 3 completion = 484 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double) H5] tokens: 457 prompt + 123 completion = 580 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double) H5] tokens: 478 prompt + 3 completion = 481 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double) H5] tokens: 454 prompt + 121 completion = 575 total
  📊 GPT[method_score org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H5] tokens: 664 prompt + 3 completion = 667 total
  📊 GPT[method_explanation org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double) H5] tokens: 542 prompt + 131 completion = 673 total

Top suspicious methods:
  1. org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double): 0.800 — best hypothesis H1: H1: The failure in "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues" may be caused by numerical instability or precision loss when handling very large or very small floating-point numbers. (confidence 0.800); supporting class org.apache.commons.math.distribution.NormalDistributionImpl (HH1)
      explanation: The method `cumulativeProbability(double x)` in `NormalDistributionImpl` supports hypothesis H1, as it involves calculating the error function `Erf.erf`, which is known to suffer from numerical instability and precision loss for extreme ...
  2. org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double): 0.300 — best hypothesis H1: H1: The failure in "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues" may be caused by numerical instability or precision loss when handling very large or very small floating-point numbers. (confidence 0.800); supporting class org.apache.commons.math.distribution.NormalDistributionImpl (HH1)
      explanation: The method `NormalDistributionImpl(double, double)` initializes a normal distribution with a specified mean and standard deviation, which are passed to the three-argument constructor `NormalDistributionImpl(double, double, double)`. This...
  3. org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl(double,double,double): 0.300 — best hypothesis H5: Hypothesis H5: The failure may be caused by an incorrect handling of floating-point precision limits when dealing with extreme values in the NormalDistribution implementation. (confidence 0.700); supporting class org.apache.commons.math.distribution.NormalDistributionImpl (HH1)
      explanation: The method `NormalDistributionImpl(double, double, double)` initializes a normal distribution with specified parameters, including inverse cumulative accuracy, but does not directly handle floating-point precision limits. The failure con...

📊 Token Usage Summary:
  Total API calls: 54
  Total tokens: 26,515
  Prompt tokens: 23,514
  Completion tokens: 3,001
Results written to defects4j_batch_results/Math-60_parallel_case/Math-60_parallel_answer.csv
Token usage written to defects4j_batch_results/Math-60_parallel_case/Math-60_token_usage.csv
Summary written to defects4j_batch_results/Math-60_parallel_case/Math-60_parallel_summary.md
